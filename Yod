/* Copyright (C) 2000, Dr. Antonio Munjiza
 *
 * This code is provided as part of the book entitled "The Combined
 * Finite Discrete Element Method". It is distributed WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. Inclusion of a part or whole of this code into any other
 * commercial or research or other purpose code is not granted without author's
 * written explicit permission.
 * When results using whole or any part of this code
 * are published, Y code must be mentioned and acknowledgement to Dr Munjiza must be made.
 * Should you modify this source code, the Copyright (C) on the modified code
 * as a whole belongs to Dr. A. Munjiza regardless of the extent or nature
 * of modifications.
 * Copyright (C) to whole of any code containing any part of this code
 * also belongs to Dr. A.Munjiza.
 * Any code comprising any part of this source code
 * must be called Y program.
 * If you do not agree with this, you are not allowed to do
 * any modifications to any part of this source code or included
 * any part of it in any other program.
 */
/* File  Yod.c */
#include "Yproto.h"
void Yod_d3plot_control_data(namep, pFile, ydc, ydpe, yde, ydn, ydpm) /* Implemented by Zhou LEI   */
  CHR *namep; FILE *pFile;  YDC ydc;  YDPE ydpe;  YDE yde;  YDN ydn; YDPM ydpm;
{ 
  INT static ipentaD[6] = {0,1,7,6,2,8}; /*for 12-nodes joint elements output*/
  INT static ipentaL[6] = {0,1,4,3,2,5}; /*for 6-nodes joint elements output */
  INT static iwedge[8]  = {0,1,4,3,2,1,4,5};
  INT static iwedge1[8] = {0,1,4,3,2,2,5,5};
  INT static iquadrL[4] = {0,3,2,1}; /*for 4-node joint elements in 2D*/
  INT static *iorder=NULL; 
  CHR title[10*RECL+1];
  INT nnodim;
  INT run_time, date, machine, code, ndim, numnp, icode, nglbv;
  INT it, iu, iv, ia, nel8, nummat8, nv3d, nel2, nummat2, nv1d;
  INT nel4, nummat4, nv2d, neiph, neips, maxint, nmsph, ngpsph;
  INT narbs, nelt, nummatt, nv3dt, ioshl, ialemat, ncfdv1, ncfdv2, nadapt;
  INT nmmat, numfluid;
  float version, pos;
  INT i, ib, itemp, inode, ielem, ix[9], ielpr, ietyp;
  
  nnodim = ydn->nnodim;
  
  strcpy(title, namep); title[10*RECL-1]='\0';
  for(i=0; i<10*RECL; i++) if(title[i]=='\0') {title[i]=' '; ib=i; break;}
  for(i=ib; i<10*RECL; i++) title[i]=' ';
  ib = 27;
  title[ib]='['; title[10*RECL-1] = '\0'; title[38] = ']';
  for(i=0; i<10; i++) title[i+ib+1]=ydc->cruntime[i];
  fwrite(title, 1, 10*RECL, pFile);
  
  run_time = 0;
  fwrite(&run_time, RECL, 1, pFile);
  
  date = 0;
  fwrite(&date, RECL, 1, pFile);
  
  machine = 971;
  fwrite(&machine, RECL, 1, pFile);
  
  code = 50638000;
  fwrite(&code, RECL, 1, pFile);
  
  version = 960.0;
  fwrite(&version, RECL, 1, pFile);
  
  ndim = 4;
  fwrite(&ndim, RECL, 1, pFile);
  
  numnp = ydn->nnopo;
  fwrite(&numnp, RECL, 1, pFile);
  
  icode=6; 
  fwrite(&icode, RECL, 1, pFile);
  
  nglbv = 6 + 7*ydpe->nprop;
  fwrite(&nglbv, RECL, 1, pFile);
  
  it = 0;
  fwrite(&it, RECL, 1, pFile);
  
  iu = 1;
  fwrite(&iu, RECL, 1, pFile);
  
  iv = 1;
  fwrite(&iv, RECL, 1, pFile);
  
  ia = 1;
  fwrite(&ia, RECL, 1, pFile); 
  
  if(nnodim==2)
  { nel8=0;
  }
  else
  { nel8 = yde->nelem;
    for(i=0; i<yde->nelem; i++)        /* added on 24/04/2010 18:04:26*/
    { if(yde->i1elpr[i]<=(-YIPROPMAX)) {nel8--;} }
  }
  fwrite(&nel8, RECL, 1, pFile);
  
  nummat8 = ydpe->nprop;
  if(nnodim==2) nummat8 = 0;
  fwrite(&nummat8, RECL, 1, pFile);
  
  itemp = 0;
  fwrite(&itemp, RECL, 1, pFile);
  fwrite(&itemp, RECL, 1, pFile);
  
  nv3d = 7;
  fwrite(&nv3d, RECL, 1, pFile);
  
  nel2 = 0;
  fwrite(&nel2, RECL, 1, pFile);
  
  nummat2 = 0;
  fwrite(&nummat2, RECL, 1, pFile);
  
  nv1d = 6;
  fwrite(&nv1d, RECL, 1, pFile);
  
/*  nel4 = 0;
    fwrite(&nel4, RECL, 1, pFile);*/
  
  if(nnodim==2)
  { nel4 = yde->nelem;
    for(i=0; i<yde->nelem; i++)        /* added on 24/04/2010 18:04:26*/
    { if(yde->i1elpr[i]<0) {nel4--;} }
  }
  else
  { nel4 = 0;
  }
  fwrite(&nel4, RECL, 1, pFile);  
  
  nummat4 = ydpe->nprop;
  if(nnodim!=2) nummat4 = 0;
  fwrite(&nummat4, RECL, 1, pFile);
  
  nv2d = 6; /*here*/
  fwrite(&nv2d, RECL, 1, pFile);
  
  neiph = 0;
  fwrite(&neiph, RECL, 1, pFile);
  
  neips = 0;  
  fwrite(&neips, RECL, 1, pFile);
  
  maxint = -10001; /*maxint = -10003;*/
  fwrite(&maxint, RECL, 1, pFile);
  
  nmsph = 0;
  fwrite(&nmsph, RECL, 1, pFile);
  
  ngpsph = 0;
  fwrite(&ngpsph, RECL, 1, pFile);
  
  narbs = 0;
  fwrite(&narbs, RECL, 1, pFile);
  
  nelt = 0;
  fwrite(&nelt, RECL, 1, pFile);
  
  nummatt = 0;
  fwrite(&nummatt, RECL, 1, pFile);
  
  nv3dt = 0;
  fwrite(&nv3dt, RECL, 1, pFile);
  
  ioshl=0;
  if(nnodim==2) ioshl = 1;
  fwrite(&ioshl, RECL, 1, pFile);
  ioshl = 0;
  fwrite(&ioshl, RECL, 1, pFile);
  fwrite(&ioshl, RECL, 1, pFile);
  fwrite(&ioshl, RECL, 1, pFile);
  
  ialemat = 0;
  fwrite(&ialemat, RECL, 1, pFile);
  
  ncfdv1 = 0;
  fwrite(&ncfdv1, RECL, 1, pFile);
  
  ncfdv2 = 0;
  fwrite(&ncfdv2, RECL, 1, pFile);
  
  nadapt = 0;
  fwrite(&nadapt, RECL, 1, pFile);
  
  nmmat = ydpe->nprop;
  fwrite(&nmmat, RECL, 1, pFile);
  
  numfluid = 0;
  fwrite(&numfluid, RECL, 1, pFile);
  
  for(i=0; i<11; i++)
  { itemp = 0;                        /* if(i==10) itemp = 12345;*/
    fwrite(&itemp, RECL, 1, pFile);
  }
  
  /* geometry data */
  for(inode=0; inode<numnp; inode++)
  { for(i=0; i<nnodim; i++)
    { pos = (float)ydn->d2nci[i][inode];
      fwrite(&pos, RECL, 1, pFile);
    }
    if(nnodim==2)
    { pos = 0.0;
      fwrite(&pos, RECL, 1, pFile);      
    }
  }

  /* connectivity and material number */
  if(nnodim==3)
  { for(ielem=0; ielem<yde->nelem; ielem++)
    { if(yde->i1elpr[ielem]<=(-YIPROPMAX)) continue;
      ielpr = yde->i1elpr[ielem]+1;
      if(ielpr>0 && ielpr<=ydpe->nprop) ietyp = ydpe->i1ptyp[ielpr-1]; /*2011-10-24 18:21:19 Z.LEI*/
      iorder = ipentaL;
      if(ydc->ietype==YTE3TETELS) iorder=ipentaD;    
      
      if( (ielpr>ydpe->nprop) )
      { ielpr = ielpr - ydpe->nprop - 1;
        for(i=0; i<ydpm->mpmrow; i++)
        { if(ielpr == ydpm->i2pmij[2][i])
          { ielpr = ydpm->i2pmij[0][i]+1;
            break;
          }
        }
        ix[8] = ielpr;
        iorder = iwedge1;
        for(i=0; i<8; i++)
        { ix[i] = yde->i2elto[iorder[i]][ielem]+1;
        }
      }
      else if(ielpr>0 && (ietyp==YTE3TETELS || ietyp==YTE3TETELL))
      { ix[8] = ielpr;
        for(i=0; i<4; i++)
        { ix[i] = yde->i2elto[i][ielem]+1;
        }
        for(i=4; i<8; i++)
        { ix[i] = ix[3];
        }
      }
      
      fwrite(ix, RECL, 9, pFile);
    }
  }
  else if(nnodim==2)
  { for(ielem=0; ielem<yde->nelem; ielem++)
    { if(yde->i1elpr[ielem]<0) continue;
      ielpr = yde->i1elpr[ielem]+1;
      iorder = iquadrL;
      
      if( (ielpr>ydpe->nprop) ) /* joint element */
      { ielpr = ielpr - ydpe->nprop - 1;
        for(i=0; i<ydpm->mpmrow; i++)
        { if(ielpr == ydpm->i2pmij[2][i])
          { ielpr = ydpm->i2pmij[0][i]+1;
            break;
          }
        }
        ix[4] = ielpr;
        for(i=0; i<4; i++)
        { ix[i] = yde->i2elto[iorder[i]][ielem]+1;
        }
      }
      else if(ielpr>0)
      { ix[4] = ielpr;
        for(i=0; i<3; i++)
        { ix[i] = yde->i2elto[i][ielem]+1;
        }
        ix[3] = ix[2];
      }
      
      fwrite(ix, RECL, 5, pFile);
    }
  }
}

void Yod_d3plot_state_data(pFile, ydc, ydpe, yde, ydn, ydpm)          /* Implemented by Zhou LEI   */
  FILE *pFile;  YDC ydc;  YDPE ydpe;  YDE yde;  YDN ydn; YDPM ydpm;
{ /* DBL ctime, rtemp, pos[3], vel[3], acc[3], sigma[6], felpr, endf; */
  float ctime, rtemp, pos[3], vel[3], acc[3], sigma[7], felpr, ke;
  DBL ***d3tcs;
  INT i, nglbv, nnodim, nnd, nelem, inode, ielem, ielpr, jelem, kelem;
  INT **i2elcn;
  /*FILE static *ftemp=NULL;*/

  ctime = (float)ydc->dctime;
  fwrite(&ctime, RECL, 1, pFile);
  
  ke = (float)ydpe->dkeneg;
  fwrite(&ke, RECL, 1, pFile);
  nglbv = 6+7*ydpe->nprop-1;
  for(i=0; i<nglbv; i++)
  { rtemp = 0.0;
    fwrite(&rtemp, RECL, 1, pFile);    
  }
  
  /* NODEDATA */
  nnd = ydn->nnopo;
  nnodim = ydn->nnodim;
  for(inode=0; inode<nnd; inode++)
  { for(i=0; i<nnodim; i++)
    { pos[i] = (float)ydn->d2ncc[i][inode];
    }
    if(nnodim==2) pos[2]=0.0;
    fwrite(pos, RECL, 3, pFile);
  }
  for(inode=0; inode<nnd; inode++)
  { for(i=0; i<nnodim; i++)
    { vel[i] = (float)ydn->d2nvc[i][inode];
    }
    if(nnodim==2) vel[2]=0.0;
    fwrite(vel, RECL, 3, pFile);    
  }
  for(inode=0; inode<nnd; inode++)
  { for(i=0; i<nnodim; i++)
    { acc[i] = (float)ydn->d2nft[i][inode];
    }
    if(nnodim==2) acc[2]=0.0;
    fwrite(acc, RECL, 3, pFile);    
  }
  
  
  d3tcs = yde->d3tcs;
  nelem = yde->nelem;
  i2elcn= yde->i2elcn;
  if(nnodim==2)
  { for(ielem=0; ielem<nelem; ielem++)
    { if(yde->i1elpr[ielem] == -YIPROPMAX) continue;
      sigma[0] = (float)d3tcs[0][0][ielem];
      sigma[1] = (float)d3tcs[1][1][ielem];
      sigma[2] = (float)d3tcs[2][2][ielem];
      sigma[3] = (float)d3tcs[0][1][ielem];
      sigma[4] = (float)d3tcs[1][2][ielem];
      sigma[5] = (float)d3tcs[0][2][ielem];
      sigma[6] = (float)0;
      fwrite(sigma, RECL, 6, pFile); /* mid surface  */
      /*fwrite(sigma, RECL, 7, pFile);  inner surface  */ 
      /*fwrite(sigma, RECL, 7, pFile);  outter surface  */
    }
  }
  else if(nnodim==3)
  { for(ielem=0; ielem<nelem; ielem++)
    { if(yde->i1elpr[ielem] < ydpe->nprop) continue;
      jelem = i2elcn[0][ielem];
      kelem = i2elcn[1][ielem];
      d3tcs[0][0][ielem]=RP5*(d3tcs[0][0][jelem]+d3tcs[0][0][kelem]);
      d3tcs[1][1][ielem]=RP5*(d3tcs[1][1][jelem]+d3tcs[1][1][kelem]);
      d3tcs[2][2][ielem]=RP5*(d3tcs[2][2][jelem]+d3tcs[2][2][kelem]);
      d3tcs[0][1][ielem]=RP5*(d3tcs[0][1][jelem]+d3tcs[0][1][kelem]);
      d3tcs[1][2][ielem]=RP5*(d3tcs[1][2][jelem]+d3tcs[1][2][kelem]);
      d3tcs[0][2][ielem]=RP5*(d3tcs[0][2][jelem]+d3tcs[0][2][kelem]);    
    }
    for(ielem=0; ielem<nelem; ielem++)
    { if(yde->i1elpr[ielem] == -YIPROPMAX) continue;
      sigma[0] = (float)d3tcs[0][0][ielem];
      sigma[1] = (float)d3tcs[1][1][ielem];
      sigma[2] = (float)d3tcs[2][2][ielem];
      sigma[3] = (float)d3tcs[0][1][ielem];
      sigma[4] = (float)d3tcs[1][2][ielem];
      sigma[5] = (float)d3tcs[0][2][ielem];
      sigma[6] = (float)0;
      fwrite(sigma, RECL, 7, pFile); 
    }
  }
  
  for(ielem=0; ielem<nelem; ielem++)
  { if(yde->i1elpr[ielem] == -YIPROPMAX) continue;
    ielpr = yde->i1elpr[ielem]+1;
    if(ielpr<0) ielpr = 0;
    if(ielpr>ydpe->nprop) /*ielpr = 1;*/
    { ielpr = ielpr - 1 - ydpe->nprop;
      for(i=0; i<ydpm->mpmrow; i++)
      { if(ielpr==ydpm->i2pmij[2][i])
        { ielpr = ydpm->i2pmij[0][i]+1;
          break;
        }
      }
    }
    felpr = (float)ielpr;
    fwrite(&felpr, RECL, 1, pFile);
  }
  
/*  endf = -999999.0;
    fwrite(&endf, RECL, 1, pFile);  */
}

static void Yod_d3plot(namep, ydc, ydpe, yde, ydn, ydpm) /* Implemented by Zhou LEI   */
  CHR *namep;  YDC ydc;  YDPE ydpe;  YDE yde;  YDN ydn; YDPM ydpm;
{ INT const DATA_BLOCK_SIZE=512;
  INT const MAX_FILE_SPACE = 10240;   /* 5M = 5*1024*1024/512 */
  INT static max_nb_state_data = 0;
  INT static curr_nb_state_data = 1;
  INT static nfile = 0;
  INT static itimes = 0;
  FILE static *pFile;
  INT state_data_size;
  CHR fName[256], fNumb[10];
  float endf;
  
  if(itimes == 0)
  { itimes = 1;
    state_data_size = (6*ydn->nnopo+8*yde->nelem)*4/DATA_BLOCK_SIZE+1;
    max_nb_state_data = MAX_FILE_SPACE/state_data_size + 1;
    pFile=fopen(namep, "wb");
    if(pFile==FILENULL)
    { CHRw(stderr,"Yod_d3plot: Can not creat output files."); 
      CHRwcr(stderr);   
      return;
    }
    Yod_d3plot_control_data(namep, pFile, ydc, ydpe, yde, ydn, ydpm);
  }
  
  if(curr_nb_state_data > max_nb_state_data)
  { if(pFile!=FILENULL) 
    { endf = -999999.0;
      fwrite(&endf, RECL, 1, pFile); 
      fclose(pFile);      
    }
    nfile++;
    if(nfile < 100)
    { sprintf(fNumb, "%2.2ld", nfile);
    }
    else if(nfile < 1000)
    { sprintf(fNumb, "%ld", nfile);
    }
    else
    { CHRw(stderr,"Yod_d3plot: Warning - many d3plot files.");
      CHRwcr(stderr);
      sprintf(fNumb, "%ld", nfile);
    }
    CHRcpy(fName, namep);    CHRcat(fName, fNumb);
    pFile=fopen(fName, "wb");
    curr_nb_state_data = 1;    
  }
  
  Yod_d3plot_state_data(pFile, ydc, ydpe, yde, ydn, ydpm);
  curr_nb_state_data++;
}
/*********************PUBLIC********************************************************/
void Yod(
     namep,yd
     )
   CHR *namep; YD yd;
{ YDC ydc=&(yd->ydc);
  YDE yde=&(yd->yde);
  YDI ydi=&(yd->ydi);
  YDN ydn=&(yd->ydn);
  YDO ydo=&(yd->ydo);
  YDPE ydpe=&(yd->ydpe);
  YDPN ydpn=&(yd->ydpn);
	YDPJ ydpj=&(yd->ydpj);
  YDPM ydpm=&(yd->ydpm);

  INT ihys;
  CHR namef[300], nameb[300];
  CHR cindex[50];
  static INT ncall=0;
  static INT ndefinitions=0;
  FILE *fout=FILENULL;
  FILE *fvtk=FILENULL;
  DBL tmp;

  ncall=ncall+1;
  if((ydc->ncstep%100)==0)
  { for(ihys=0;ihys<(ydo->nohys);ihys++)
    { ydo->d1ohyt[ihys]=ydc->dctime;
      if((ydo->d1ohyt[ihys])==(ydc->dctime))
      { if((ydo->f2ohyf[ihys])==FILENULL)
        { CHRcpy(namef,namep);
          SINTw(cindex,ihys,0);
          CHRcat(namef,"h");
          CHRcat(namef,cindex); 
          ydo->f2ohyf[ihys]=fopen(namef,"a");
        }
        if((ydo->f2ohyf[ihys])!=FILENULL)
        { tmp=(ydo->d1ohyt[ihys])*(ydo->d1ohyc[ihys]);
          DBLw((ydo->f2ohyf[ihys]),tmp,17); 
          CHRwsp(ydo->f2ohyf[ihys]);
          tmp=(ydo->d1ohys[ihys])*(ydo->d1ohyf[ihys]);
          DBLw((ydo->f2ohyf[ihys]),tmp,17);
          CHRwcr(ydo->f2ohyf[ihys]);       
  } } } }
  if((ncall>100)||((ydc->ncstep)>=(ydc->mcstep-2)))
  { ncall=0;
    for(ihys=0;ihys<(ydo->nohys);ihys++)
    { if((ydo->f2ohyf[ihys])!=FILENULL)fclose(ydo->f2ohyf[ihys]);
      ydo->f2ohyf[ihys]=FILENULL;
  } }

  /* output animation */
  fout=FILENULL;
  if((ydc->ncstep%ydc->icoutf)==0)
  { CHRcpynopath(nameb,namep);
    Yod_d3plot(nameb, ydc, ydpe, yde, ydn, ydpm);
  }
}

