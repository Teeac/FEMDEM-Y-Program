/* Copyright (C) 2000, Dr. Antonio Munjiza
 *
 * This code is provided as part of the book entitled "The Combined
 * Finite Discrete Element Method". It is distributed WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. Inclusion of a part or whole of this code into any other
 * commercial or research or other purpose code is not granted without author's
 * written explicit permission.
 * When results using whole or any part of this code
 * are published, Y code must be mentioned and acknowledgement to Dr Munjiza must be made.
 * Should you modify this source code, the Copyright (C) on the modified code
 * as a whole belongs to Dr. A. Munjiza regardless of the extent or nature
 * of modifications.
 * Copyright (C) to whole of any code containing any part of this code
 * also belongs to Dr. A.Munjiza.
 * Any code comprising any part of this source code
 * must be called Y program.
 * If you do not agree with this, you are not allowed to do
 * any modifications to any part of this source code or included
 * any part of it in any other program.
 */
/* File   Yid.c */
#include "Yproto.h"
/**********************GENERALISED INTERACTION FORCES*****************************************/
static void Yid2TRITRI(              /* Triangle to Triangle */
             nelem,
            dcstec,diezon, iprop, jprop,
            d1iesl,d1nccx,d1nccy,d1nfcx,d1nfcy,
            d1nvcx,d1nvcy,d1pepe,d1pept, d1pefr,i1elcf,i1elpr,
            i1icff,i1iecn,i1iect,i2elto,d2sldis
            )
  INT    nelem;
  DBL   dcstec; DBL   diezon; INT    iprop; INT    jprop;
  DBL  *d1iesl; DBL  *d1nccx; DBL  *d1nccy; DBL  *d1nfcx; DBL  *d1nfcy;
  DBL  *d1nvcx; DBL  *d1nvcy; DBL  *d1pepe; DBL  *d1pept; DBL  *d1pefr;
  DBL  **d2sldis;
  INT  *i1elcf; INT  *i1elpr; INT  *i1icff; INT  *i1iecn; INT  *i1iect;
  INT **i2elto;
{ INT kprop,icontact,ielem,jelem,icoup,jcoup,it,jt,in,jn,ie,je,ip,jp,np;
  DBL a0,a1,a2,b0,b1,b2,c0,c1,c2,n0,n1,n2;
  DBL pen,penT,tmp,dmin2,smin,smax;
  DBL fric, saver, aver0, aver1,aver2;
  DBL vrelx, vrely;
  DBL vx[2][3];
  DBL vy[2][3];
  DBL vrel;
  DBL fn,fna,fnb;      /* normal forces      */
  DBL ft, fta, ftb;    /* tangential forces  */
  DBL small=EPSILON;
  DBL nsmall=-EPSILON;
  DBL big=BEPSILON;
  DBL zone2;
  DBL p[10];
  DBL s[10];
  DBL fx[3];
  DBL fy[3];
  DBL vol[2];
  DBL rx[2][3];
  DBL ry[2][3];
  DBL nx[2][3];
  DBL ny[2][3];
  DBL d[2][3][3];
  INT i2to[2][3];

  DBL *d1sldis;     /* sliding distance */
  INT icoupID;

  zone2=(R4*diezon*diezon);
  pen=MINIM(d1pepe[iprop],d1pepe[jprop]);
  penT=MINIM(d1pept[iprop],d1pept[jprop]);
  if(d1pefr == DBL1NULL)
  { fric = R0;
  }
  else
  { fric=MINIM(d1pefr[iprop],d1pefr[jprop]);    /* fric = Coulomb friction  */
  }
  for(ielem=0;ielem<nelem;ielem++)
  { if(i1elpr[ielem]==iprop)
    { kprop=jprop;
    }
    else if(i1elpr[ielem]==jprop)
    { kprop=iprop;
    }
    else
    { kprop=-1;
    }
    if(kprop>=0)
    { icoup=i1elcf[ielem];
      jcoup=-1;
      while(icoup>=0)
      { if(i1iect[icoup]<0)i1iect[icoup]=-1-i1iect[icoup];
        jelem=i1iect[icoup];
        icontact=-2;
        if(i1elpr[jelem]==kprop)
        { icontact=-1;
          jt=jelem;
          for(it=0;it<2;it++)
          { for(in=0;in<3;in++)
            { i2to[it][in]=i2elto[in][jt];
            }
            jt=ielem;
          }
          for(it=0;it<2;it++)
          { for(in=0;in<3;in++)
            { rx[it][in]=d1nccx[i2to[it][in]];
              ry[it][in]=d1nccy[i2to[it][in]];
              vx[it][in]=d1nvcx[i2to[it][in]];  /* velocities for friction */
              vy[it][in]=d1nvcy[i2to[it][in]];
          } }
          for(it=0;it<2;it++)
          { vol[it]=(rx[it][1]-rx[it][0])*(ry[it][2]-ry[it][0])-
                    (ry[it][1]-ry[it][0])*(rx[it][2]-rx[it][0]);
            for(ie=0;ie<3;ie++)
            { je=ie+1; if(je>2)je=0;
              nx[it][ie]=ry[it][je]-ry[it][ie];
              ny[it][ie]=rx[it][ie]-rx[it][je];
          } }
          for(it=0;it<2;it++)
          { jt=it+1; if(jt>1)jt=0;
            for(in=0;in<3;in++)
            { for(ie=0;ie<3;ie++)
              { d[it][in][ie]=((rx[jt][ie]-rx[it][in])*nx[jt][ie]+
                (ry[jt][ie]-ry[it][in])*ny[jt][ie])/vol[jt];
          } } }
          dmin2=big;
          /* main loop */
          icoupID=-1;
          for(it=0;it<2;it++)
          { jt=it+1; if(jt>1)jt=0;
            for(in=0;in<3;in++)
            { fx[in]=R0; fy[in]=R0;
            }
            n0=(nx[jt][0]*nx[jt][0]+ny[jt][0]*ny[jt][0])/
               (vol[jt]*vol[jt]);
            n1=(nx[jt][1]*nx[jt][1]+ny[jt][1]*ny[jt][1])/
               (vol[jt]*vol[jt]);
            n2=(nx[jt][2]*nx[jt][2]+ny[jt][2]*ny[jt][2])/
               (vol[jt]*vol[jt]);
            for(in=0;in<3;in++)
            { icoupID=icoupID+1;
              d1sldis=d2sldis[icoupID];

              jn=in+1; if(jn>2)jn=0;
              a0=d[it][in][0];
              a1=d[it][in][1];
              a2=d[it][in][2];
              b0=d[it][jn][0];
              b1=d[it][jn][1];
              b2=d[it][jn][2];
              c0=d[jt][0][in];
              c1=d[jt][1][in];
              c2=d[jt][2][in];
              /* check if contact */
              if((((c0>nsmall)&&(c1>nsmall)&&(c2>nsmall))||
                  ((c0<small)&&(c1<small)&&(c2<small)))||
                 (((a0<small)&&(b0<small))||((a1<small)&&(b1<small))||
                  ((a2<small)&&(b2<small))))
              { if((a0<=a1)&&(a0<=a2))
                { dmin2=MINIM(dmin2,(a0*a0/n0));
                }
                else if((a1<=a0)&&(a1<=a2))
                { dmin2=MINIM(dmin2,(a1*a1/n1));
                }
                else
                { dmin2=MINIM(dmin2,(a2*a2/n2));
                }
              }
              else
              { icontact=it;
                /* domain of contact */
                smin=R0; smax=R1;
                if((a0<R0)&&(b0>small))smin=MAXIM(smin,(a0/(a0-b0)));
                if((a1<R0)&&(b1>small))smin=MAXIM(smin,(a1/(a1-b1)));
                if((a2<R0)&&(b2>small))smin=MAXIM(smin,(a2/(a2-b2)));
                if((a0>small)&&(b0<R0))smax=MINIM(smax,(a0/(a0-b0)));
                if((a1>small)&&(b1<R0))smax=MINIM(smax,(a1/(a1-b1)));
                if((a2>small)&&(b2<R0))smax=MINIM(smax,(a2/(a2-b2)));
                if(smax>smin)
                { s[0]=smin;
                  p[0]=MINIM((a0+smin*(b0-a0)),(a1+smin*(b1-a1)));
                  p[0]=MINIM(p[0],(a2+smin*(b2-a2)));
                  np=1;
                  /* intermediate points */
                  tmp=b0-a0+a1-b1;
                  if((DABS(tmp))>small)
                  { tmp=(a1-a0)/tmp;
                    if((tmp>smin)&&(tmp<smax)&&
                       ((a0+tmp*(b0-a0))<(a2+tmp*(b2-a2))))
                    { s[np]=tmp;
                      p[np]=a0+tmp*(b0-a0);
                      np=np+1;
                  } }
                  tmp=b0-a0+a2-b2;
                  if((DABS(tmp))>small)
                  { tmp=(a2-a0)/tmp;
                    if((tmp>smin)&&(tmp<smax)&&
                       ((a0+tmp*(b0-a0))<(a1+tmp*(b1-a1))))
                    { s[np]=tmp;
                      p[np]=a0+tmp*(b0-a0);
                      np=np+1;
                  } }
                  tmp=b1-a1+a2-b2;
                  if((DABS(tmp))>small)
                  { tmp=(a2-a1)/tmp;
                    if((tmp>smin)&&(tmp<smax)&&
                       ((a1+tmp*(b1-a1))<(a0+tmp*(b0-a0))))
                    { s[np]=tmp;
                      p[np]=a1+tmp*(b1-a1);
                      np=np+1;
                  } }
                  s[np]=smax;
                  p[np]=MINIM((a0+smax*(b0-a0)),(a1+smax*(b1-a1)));
                  p[np]=MINIM(p[np],(a2+smax*(b2-a2)));
                  np=np+1;
                  /* order intermediate points */
                  for(ip=0;ip<(np-1);ip++)
                  { for(jp=(ip+1);jp<np;jp++)
                    { if(s[ip]>s[jp])
                      { tmp=s[jp]; s[jp]=s[ip]; s[ip]=tmp;
                        tmp=p[jp]; p[jp]=p[ip]; p[ip]=tmp;
                  } } }

                  /* calculate relative velocity and sliding distance */
                  saver = R0;
                  for(ip=0;ip<np;ip++)
                  { saver = saver + s[ip];
                  }
                  saver = saver/((DBL)np);
                  aver0 = ((a0*(R1-saver)) + (b0*saver));
                  aver1 = ((a1*(R1-saver)) + (b1*saver));
                  aver2 = ((a2*(R1-saver)) + (b2*saver));
                  vrelx = (aver0*vx[jt][2]+aver1*vx[jt][0]+aver2*vx[jt][1])-
                          ((R1-saver)*vx[it][in]+saver*vx[it][jn]);
                  vrely = (aver0*vy[jt][2]+aver1*vy[jt][0]+aver2*vy[jt][1])-
                          ((R1-saver)*vy[it][in]+saver*vy[it][jn]);
                  vrel = -vrelx*ny[it][in] + vrely*nx[it][in];

                  d1sldis[icoup]=d1sldis[icoup]+vrel*dcstec;      /* sliding distance */

                  /* integrate normal force */
                  fn=p[0]*(s[1]-s[0])+p[np-1]*(s[np-1]-s[np-2]);
                  fnb=p[0]*(s[1]-s[0])*(s[1]+R2*s[0])+
                      p[np-1]*(s[np-1]-s[np-2])*(s[np-2]+R2*s[np-1]);
                  for(ip=1;ip<(np-1);ip++)
                  { fn=fn+p[ip]*(s[ip+1]-s[ip-1]);
                    fnb=fnb+p[ip]*(
                    (s[ip]-s[ip-1])*(s[ip-1]+R2*s[ip])+
                    (s[ip+1]-s[ip])*(s[ip+1]+R2*s[ip]));
                  }
                  fnb=fnb*pen*RP5;
                  fn=fn*pen*RP15;
                  fna=fn-fnb;

                  /* tangential forces (+friction) */
                  ft=d1sldis[icoup]*penT;
                        /* allow only Elastic displacements in tangential direction */
                  if(DABS(ft)>(fric*DABS(fn)))
                  { ft=ft*DABS(fric*fn/ft);
                    d1sldis[icoup]=ft/penT;
                  }
                  fta=ft*fna/fn;
                  ftb=ft*fnb/fn;

                  /* update total force */
                  fx[in]=fx[in]-fna*nx[it][in]-fta*ny[it][in];
                  fy[in]=fy[in]-fna*ny[it][in]+fta*nx[it][in];
                  fx[jn]=fx[jn]-fnb*nx[it][in]-ftb*ny[it][in];
                  fy[jn]=fy[jn]-fnb*ny[it][in]+ftb*nx[it][in];
            } } }
            if(icontact==it) /* update nodal forces  */
            { for(in=0;in<3;in++)
              { d1nfcx[i2to[it][in]]=d1nfcx[i2to[it][in]]+fx[in];
                d1nfcy[i2to[it][in]]=d1nfcy[i2to[it][in]]+fy[in];
                ie=in+1; if(ie>2)ie=0;
                for(jn=0;jn<3;jn++)
                { d1nfcx[i2to[jt][in]]=d1nfcx[i2to[jt][in]]-
                  fx[jn]*d[it][jn][ie];
                  d1nfcy[i2to[jt][in]]=d1nfcy[i2to[jt][in]]-
                  fy[jn]*d[it][jn][ie];
        } } } } }
        /* remove the couple if too far from each other  */
        if((icontact==(-1))&&(dmin2>zone2))
        { if(jcoup<0)
          { i1elcf[ielem]=i1iecn[icoup];
            i1iecn[icoup]=*i1icff;
            *i1icff=icoup;
            icoup=i1elcf[ielem];
          }
          else
          { i1iecn[jcoup]=i1iecn[icoup];
            i1iecn[icoup]=*i1icff;
            *i1icff=icoup;
            icoup=i1iecn[jcoup];
        } }
        else
        { jcoup=icoup;
          icoup=i1iecn[icoup];
  } } } }
}

static void Yid3TET2TET(/* tetrahedra to tetrahedra */
            nelem, ietype,
            dcstec,diezon, iprop, jprop,
            d1iesl,d1nccx,d1nccy,d1nccz,
            d1nfcx,d1nfcy,d1nfcz,
            d1nvcx,d1nvcy,d1nvcz,
            d1pepe,i1elcf,i1elpr,
            i1icff,i1iecn,i1iect,i2elto 
            )
  INT    nelem; INT   ietype;
  DBL   dcstec; DBL   diezon; INT    iprop; INT    jprop;
  DBL  *d1iesl; DBL  *d1nccx; DBL  *d1nccy; DBL  *d1nccz; 
  DBL  *d1nfcx; DBL  *d1nfcy; DBL  *d1nfcz;
  DBL  *d1nvcx; DBL  *d1nvcy; DBL  *d1nvcz;
  DBL  *d1pepe; INT  *i1elcf; INT  *i1elpr;
  INT  *i1icff; INT  *i1iecn; INT  *i1iect; INT **i2elto;
{ DBL tmp,theigh,penetr,peneto,penetu,penetv,penalty;
  DBL force,forco,uforc,vforc,factor,fact0,facti,fact1;
  DBL xorig,yorig,zorig,xe[2],ye[2],ze[2],dct[4];
  DBL dsc[6][3],dcs[3][6],us[6],vs[6],ub[10],vb[10],anb[10],penetb[10];
  DBL xt[4],yt[4],zt[4],ut[4],vt[4],ft[4],xcent,ycent,zcent,xnt,ynt,znt; 
  DBL xc[4],yc[4],zc[4],uc[4],vc[4],fc[4],xcenc,ycenc,zcenc,xnc,ync,znc;
  DBL zone2,dmin2,factor1;

  INT kprop,icontact,ielem,jelem,icoup,jcoup,fnonzero;
 
  INT i,j,k,inext,jnext,itars,icons,itag;
  INT nspoin,ninerc,niners,nbpoin,ipt[4],ipc[4],innerc[3],inners[6];
  INT itarth,iconth;
  INT iptn[4],ipcn[4];
  INT iptn1[4],ipcn1[4],m;
  zone2=(R4*diezon*diezon);
  penalty=MINIM(d1pepe[iprop],d1pepe[jprop]);
  for(ielem=0;ielem<nelem;ielem++)
  { if(i1elpr[ielem]==iprop)
    { kprop=jprop;
    }
    else if(i1elpr[ielem]==jprop)
    { kprop=iprop;
    }
    else
    { kprop=-1;
    }
    if(kprop>=0)
    { icoup=i1elcf[ielem];
      jcoup=-1;
      while(icoup>=0)
      { if(i1iect[icoup]<0)i1iect[icoup]=-1-i1iect[icoup];
        jelem=i1iect[icoup];
        icontact=-2;
        if(i1elpr[jelem]==kprop)
        { icontact=-1;
          fnonzero=0;
          dmin2=R0;
          itarth=jelem; 
          iconth=ielem;
          /*set centres of contactor and target object */
          xcent=R0; ycent=R0; zcent=R0; xcenc=R0; ycenc=R0; zcenc=R0;
          for(i=0;i<4;i++)
          { xcenc=xcenc+RP25*d1nccx[i2elto[i][iconth]]; 
            ycenc=ycenc+RP25*d1nccy[i2elto[i][iconth]];
            zcenc=zcenc+RP25*d1nccz[i2elto[i][iconth]];
            xcent=xcent+RP25*d1nccx[i2elto[i][itarth]];
            ycent=ycent+RP25*d1nccy[i2elto[i][itarth]];
            zcent=zcent+RP25*d1nccz[i2elto[i][itarth]];
          }
          /*********************************************************/     
          /*                loop over target surfaces              */
          /*********************************************************/
          for(itars=0;itars<4;itars++)
          { ipt[0]=i2elto[itars][itarth];
            iptn1[0]=itars;
            ipt[1]=i2elto[1][itarth];
            iptn1[1]=1;
            ipt[2]=i2elto[2][itarth];
            iptn1[2]=2;
            if(itars>0)
            { ipt[3]=i2elto[itars-1][itarth];
              iptn1[3]=itars-1;
            }
            else
            { ipt[3]=i2elto[3][itarth];
              iptn1[3]=3;
            }    
            if((itars==1)||(itars==2))
            { ipt[1]=i2elto[3][itarth];
              iptn1[1]=3;
            }
            if(itars>1)
            { ipt[2]=i2elto[0][itarth];
              iptn1[2]=0;
            }    
        /*           loop over contactor surfaces              */    
            for(icons=0;icons<4;icons++)
            { ipc[0]=i2elto[icons][iconth];
              ipcn1[0]=icons;
              ipc[1]=i2elto[1][iconth];
              ipcn1[1]=1;
              ipc[2]=i2elto[2][iconth];
              ipcn1[2]=2;
              if(icons>0)
              { ipc[3]=i2elto[icons-1][iconth];
                ipcn1[3]=icons-1;
              }
              else
              { ipc[3]=i2elto[3][iconth];
                ipcn1[3]=3;
              }
              if((icons==1)||(icons==2))
              { ipc[1]=i2elto[3][iconth];
                ipcn1[1]=3;
              }
              if(icons>1)
              { ipc[2]=i2elto[0][iconth];
                ipcn1[2]=0;
              }

              for(m=0;m<4;m++)
              { iptn[iptn1[m]]=m;
                ipcn[ipcn1[m]]=m;
              }

              /* set nodal coordinates */
              for(i=0;i<3;i++)
              { xt[i]=d1nccx[ipt[i]];
                yt[i]=d1nccy[ipt[i]];
                zt[i]=d1nccz[ipt[i]];
                xc[i]=d1nccx[ipc[i]];
                yc[i]=d1nccy[ipc[i]];
                zc[i]=d1nccz[ipc[i]];
              }
              xt[3]=xcent; yt[3]=ycent; zt[3]=zcent;
              xc[3]=xcenc; yc[3]=ycenc; zc[3]=zcenc;
              xorig=xc[0]; yorig=yc[0]; zorig=zc[0];
              for(i=0;i<4;i++)
              { xt[i]=xt[i]-xorig; yt[i]=yt[i]-yorig; zt[i]=zt[i]-zorig;
                xc[i]=xc[i]-xorig; yc[i]=yc[i]-yorig; zc[i]=zc[i]-zorig; 
              } 
              /* contactor normal, e-base and target points in e-base */
              V3DCro(xnc,ync,znc,xc[1],yc[1],zc[1],xc[2],yc[2],zc[2]);
              V3DNor(xe[0],xnc,ync,znc);
              xe[0]=xc[1]; ye[0]=yc[1]; ze[0]=zc[1];
              V3DNor(xe[1],xe[0],ye[0],ze[0]); 
              V3DCro(xe[1],ye[1],ze[1],xnc,ync,znc,xe[0],ye[0],ze[0]);
              for(i=0;i<4;i++)
              { V3DDot(dct[i],xnc,ync,znc,xt[i],yt[i],zt[i]);
                V3DDot(ut[i],xt[i],yt[i],zt[i],xe[0],ye[0],ze[0]);
                V3DDot(vt[i],xt[i],yt[i],zt[i],xe[1],ye[1],ze[1]);
              }
              if((dct[0]<=EPSILON)&&(dct[1]<=EPSILON)&&
                  (dct[2]<=EPSILON))continue;  
/*              if((dct[0]<=EPSILON)&&(dct[1]<=EPSILON)&&
                   (dct[2]<=EPSILON)&&(dct[3]<=EPSILON))continue;*/

              /* u,v coordinates of S-points and C-points   */
              nspoin=0;
              itag = 0;
              for(i=0;i<3;i++)
              { for(j=0;j<2;j++)
                { inext=i+1; if(inext>2)inext=0; if(j==0)inext=3;
                  if(((dct[i]>EPSILON)&&(dct[inext]<NEPSILON))||   
                     ((dct[i]<NEPSILON)&&(dct[inext]>EPSILON)))                    
                  { factor=ABS(dct[i]-dct[inext]);          
                    if(factor>EPSILON)
                    { factor=ABS(dct[i]/factor);
                      us[nspoin]=factor*ut[inext]+(R1-factor)*ut[i];
                      vs[nspoin]=factor*vt[inext]+(R1-factor)*vt[i];
                      inners[nspoin]=0;
                      nspoin=nspoin+1;
                      if(nspoin==2) itag=i;
              } } } }
              if((nspoin<3)||(nspoin>4)) continue;
              /* check odering of S-points */
              if(nspoin==4 && itag == 2)    /*Zhou LEI (alex) 20/05/2010 21:50:07*/
              { i=2; j=3;
                k=inners[i]; inners[i]=inners[j]; inners[j]=k;
                tmp=us[i];  us[i]=us[j];  us[j]=tmp;
                tmp=vs[i];  vs[i]=vs[j];  vs[j]=tmp;
                printf("%s", "actively.\n");
              }
              if(((us[1]-us[0])*(vs[2]-vs[0])-
                  (vs[1]-vs[0])*(us[2]-us[0]))<R0)
              { i=0; j=nspoin-1;
                while(i<j)
                { k=inners[i]; inners[i]=inners[j]; inners[j]=k;
                  tmp=us[i];   us[i]=us[j];         us[j]=tmp;
                  tmp=vs[i];   vs[i]=vs[j];         vs[j]=tmp;
                  i++; j--;
              } }
              for(i=0;i<3;i++)
              { V3DDot(uc[i],xc[i],yc[i],zc[i],xe[0],ye[0],ze[0]);
                V3DDot(vc[i],xc[i],yc[i],zc[i],xe[1],ye[1],ze[1]);
                innerc[i]=0;
              }
              /* distances of C-points from S edges */
              niners=0; ninerc=0;
              for(i=0;i<nspoin;i++)
              { inext=i+1;
                if(inext>=nspoin)inext=0;
                for(j=0;j<3;j++) 
                { jnext=j+1;
                  if(jnext>2)jnext=0;
                  dcs[j][i]=(uc[jnext]-uc[j])*(vs[i]-vc[j])-
                            (vc[jnext]-vc[j])*(us[i]-uc[j]);
                  dsc[i][j]=(us[inext]-us[i])*(vc[j]-vs[i])-
                            (vs[inext]-vs[i])*(uc[j]-us[i]);
                  if(dsc[i][j]>=R0)
                  { innerc[j]=innerc[j]+1;
                    if(innerc[j]==nspoin)ninerc=ninerc+1;
                  }
                  if(dcs[j][i]>=R0)
                  { inners[i]=inners[i]+1;
                    if(inners[i]==3)niners=niners+1;
              } } }
              /* B-points */         
              if(ninerc==3)           /* triangle inside poligon      */
              { nbpoin=3;
                for(i=0;i<nbpoin;i++)
                { ub[i]=uc[i]; vb[i]=vc[i];
              } }
              else if(niners==nspoin) /* poligon inside triangle      */
              { nbpoin=nspoin;
                for(i=0;i<nbpoin;i++)
                { ub[i]=us[i]; vb[i]=vs[i];
              } }
              else            /* intersection points poligon triangle */
              { nbpoin=0;
                for(i=0;i<nspoin;i++)
                { if(inners[i]==3)
                  { ub[nbpoin]=us[i]; vb[nbpoin]=vs[i]; nbpoin++; 
                } }
                for(i=0;i<3;i++)  /* grab inner C-points */
                { if(innerc[i]==nspoin)  
                  { ub[nbpoin]=uc[i]; vb[nbpoin]=vc[i]; nbpoin++;       
                } }       
                for(i=0;i<nspoin;i++)        /* intersection points   */
                { inext=i+1; if(inext>=nspoin)inext=0;
                  for(j=0;j<3;j++)
                  {jnext=j+1; if(jnext>2)jnext=0;
                   if((((dsc[i][j]>EPSILON)&&(dsc[i][jnext]<NEPSILON))||
                    ((dsc[i][j]<NEPSILON)&&(dsc[i][jnext]>EPSILON)))&&
                    (((dcs[j][i]>EPSILON)&&(dcs[j][inext]<NEPSILON))||
                    ((dcs[j][i]<NEPSILON)&&(dcs[j][inext]>EPSILON))))                           
                    { factor=ABS(dsc[i][j]-dsc[i][jnext]);
                      if(factor<EPSILON){ factor=RP5;                  }
                      else              { factor=ABS(dsc[i][j]/factor);}
                      ub[nbpoin]=(R1-factor)*uc[j]+factor*uc[jnext];
                      vb[nbpoin]=(R1-factor)*vc[j]+factor*vc[jnext];
                      nbpoin++;
                } } }        
                for(i=1;i<nbpoin;i++)
                { if(vb[i]<vb[0])
                  { tmp=vb[i]; vb[i]=vb[0]; vb[0]=tmp;
                    tmp=ub[i]; ub[i]=ub[0]; ub[0]=tmp;
                } }
                for(i=1;i<nbpoin;i++)
                { tmp=ub[i]-ub[0];                 
                  if((tmp<R0)&&(tmp>(-EPSILON)))
                  { tmp=tmp-EPSILON;
                  }
                  else if((tmp>=R0)&&(tmp<EPSILON))
                  { tmp=tmp+EPSILON;
                  }
                  anb[i]=(vb[i]-vb[0]+EPSILON)/tmp;
                }
                for(i=1;i<nbpoin;i++)  /* sort B-points */
                { for(j=i+1;j<nbpoin;j++)
                  { if(((anb[i]>=R0)&&(anb[j]>=R0)&&(anb[j]<anb[i]))||
                       ((anb[i]<R0)&&((anb[j]>=R0)||(anb[j]<anb[i]))))
                    { tmp=vb[i];  vb[i]=vb[j];   vb[j]=tmp;
                      tmp=ub[i];  ub[i]=ub[j];   ub[j]=tmp;
                      tmp=anb[i]; anb[i]=anb[j]; anb[j]=tmp;
              } } } }
              if(nbpoin<3)continue; 
              /* Target-plain normal and penetration at B-points */           
              V3DCro(xnt,ynt,znt,xt[1]-xt[0],yt[1]-yt[0],zt[1]-zt[0],
                                 xt[2]-xt[0],yt[2]-yt[0],zt[2]-zt[0]);
              V3DDot(theigh,xt[3]-xt[0],
                     yt[3]-yt[0],zt[3]-zt[0],xnt,ynt,znt);
              /* penetration at origin of the e-base and dp/du dp/dv; */
              V3DDot(peneto,xc[0]-xt[0],yc[0]-yt[0],
                     zc[0]-zt[0],xnt,ynt,znt)
              V3DDot(penetu,xe[0],ye[0],ze[0],xnt,ynt,znt);
              V3DDot(penetv,xe[1],ye[1],ze[1],xnt,ynt,znt);
              peneto=peneto/theigh; 
              penetu=penetu/theigh; 
              penetv=penetv/theigh;
              for(i=0;i<nbpoin;i++)
              { penetb[i]=peneto+ub[i]*penetu+vb[i]*penetv;
              }
              /* force and center of force */
              forco=R0; uforc=R0; vforc=R0;   
              for(i=1;i<(nbpoin-1);i++)
              { penetr=penetb[0]+penetb[i]+penetb[i+1];
                if(penetr>EPSILON){
                  force=((ub[i]-ub[0])*(vb[i+1]-vb[0])-
                         (vb[i]-vb[0])*(ub[i+1]-ub[0]))*penetr*penalty;
                  fact0=(RP5*penetb[0]+
                         RP25*(penetb[i]+penetb[i+1]))/penetr;
                  facti=(RP5*penetb[i]+RP25*(penetb[0]+
                         penetb[i+1]))/penetr;
                  fact1=R1-fact0-facti;
                  if(ABS(force+forco)>EPSILON)
                  { uforc=(forco*uforc+force*(fact0*ub[0]+
                          facti*ub[i]+fact1*ub[i+1]))/(forco+force); 
                    vforc=(forco*vforc+force*(fact0*vb[0]+
                          facti*vb[i]+fact1*vb[i+1]))/(forco+force);
                    forco=forco+force;
              } } } 
              /*             resultant at C-points */
              for(i=0;i<4;i++)
              { fc[i]=R0; ft[i]=R0;
              }
              tmp=((uc[1]-uc[0])*(vc[2]-vc[0])-(vc[1]-vc[0])*(uc[2]-uc[0]));
              for(i=0;i<3;i++)
              { j=i+1; if(j>2)j=0; k=j+1; if(k>2)k=0;
                fc[k]=forco*(((uc[j]-uc[i])*(vforc-vc[i])-
                (vc[j]-vc[i])*(uforc-uc[i]))/tmp); 
              }
              /*             resultant at T-points  */ 
              tmp=((ut[1]-ut[0])*(vt[2]-vt[0])-(vt[1]-vt[0])*(ut[2]-ut[0]));
              inext=-1;
              if(ABS(tmp)<RP1*theigh)
              { inext=0; tmp=ABS(ut[1]-ut[0])+ABS(vt[1]-vt[0]); 
                for(i=0;i<3;i++)
                { j=i+1; if(j>2)j=0;
                  if(tmp>(ABS(ut[j]-ut[i])+ABS(vt[j]-vt[i])))
                  { tmp=ABS(ut[j]-ut[i])+ABS(vt[j]-vt[i]);  inext=i;
                } }
                j=inext+1; if(j>2)j=0;
                if(ABS(zt[j])>ABS(zt[inext]))inext=j;
                j=inext+1; if(j>2)j=0;  k=j+1;  if(k>2)k=0;  
                tmp=(ut[k]-ut[j])*(vt[3]-vt[j])-(vt[k]-vt[j])*(ut[3]-ut[j]);
              }
              for(jnext=0;jnext<3;jnext++)
              { i=jnext; j=i+1; if(j>2)j=0; k=j+1; if(k>2)k=0;
                if(i==inext)i=3; if(j==inext)j=3; if(k==inext)k=3; 
                ft[k]=forco*(((ut[j]-ut[i])*(vforc-vt[i])-
                      (vt[j]-vt[i])*(uforc-ut[i]))/tmp);                 
              }
              ft[3]=RP25*ft[3];
              for(i=0;i<3;i++)
              { ft[i]=ft[i]+ft[3];
              }
              /* add forces into global vector */
              if(ietype==YTE3TETELL)
              { for(i=0;i<4;i++)
                { d1nfcx[ipc[i]]=d1nfcx[ipc[i]]+fc[i]*xnc;
                  d1nfcy[ipc[i]]=d1nfcy[ipc[i]]+fc[i]*ync;
                  d1nfcz[ipc[i]]=d1nfcz[ipc[i]]+fc[i]*znc;
                  d1nfcx[ipt[i]]=d1nfcx[ipt[i]]-ft[i]*xnc;
                  d1nfcy[ipt[i]]=d1nfcy[ipt[i]]-ft[i]*ync;
                  d1nfcz[ipt[i]]=d1nfcz[ipt[i]]-ft[i]*znc;
                }
              }
              else if(ietype==YTE3TETELS)
              { factor1=R2/R5;
                fnonzero=1;
                for(i=0;i<4;i++)
                { d1nfcx[ipc[i]]=d1nfcx[ipc[i]]+fc[i]*xnc*factor1;
                  d1nfcy[ipc[i]]=d1nfcy[ipc[i]]+fc[i]*ync*factor1;
                  d1nfcz[ipc[i]]=d1nfcz[ipc[i]]+fc[i]*znc*factor1;
                  d1nfcx[ipt[i]]=d1nfcx[ipt[i]]-ft[i]*xnc*factor1;
                  d1nfcy[ipt[i]]=d1nfcy[ipt[i]]-ft[i]*ync*factor1;
                  d1nfcz[ipt[i]]=d1nfcz[ipt[i]]-ft[i]*znc*factor1;
                }
                for(i=4;i<10;i++)
                { j=i-4;
                  k=i-3;
                  if(i==6)k=0;
                  if(i>6)
                  {j=i-7;
                   k=3;
                  }
                  d1nfcx[i2elto[i][iconth]]=d1nfcx[i2elto[i][iconth]]+
                              (fc[ipcn[j]]+fc[ipcn[k]])*xnc*factor1/R2;
                  d1nfcy[i2elto[i][iconth]]=d1nfcy[i2elto[i][iconth]]+
                              (fc[ipcn[j]]+fc[ipcn[k]])*ync*factor1/R2;
                  d1nfcz[i2elto[i][iconth]]=d1nfcz[i2elto[i][iconth]]+
                              (fc[ipcn[j]]+fc[ipcn[k]])*znc*factor1/R2;
                  d1nfcx[i2elto[i][itarth]]=d1nfcx[i2elto[i][itarth]]-
                              (ft[iptn[j]]+ft[iptn[k]])*xnc*factor1/R2;
                  d1nfcy[i2elto[i][itarth]]=d1nfcy[i2elto[i][itarth]]-
                              (ft[iptn[j]]+ft[iptn[k]])*ync*factor1/R2;
                  d1nfcz[i2elto[i][itarth]]=d1nfcz[i2elto[i][itarth]]-
                              (ft[iptn[j]]+ft[iptn[k]])*znc*factor1/R2;
                }
              }
              else
              { fprintf(stderr, "Error: mismatch element type for calculation in Y3DID.\n");
                exit(-1);
              }
            }
          }
        
        }
        if((icontact==(-1))&&(dmin2>zone2))
        { if(jcoup<0)
          { i1elcf[ielem]=i1iecn[icoup];
            i1iecn[icoup]=*i1icff;
            *i1icff=icoup;
            icoup=i1elcf[ielem];
          }
          else
          { i1iecn[jcoup]=i1iecn[icoup];
            i1iecn[icoup]=*i1icff;
            *i1icff=icoup;           
            icoup=i1iecn[jcoup];       
          }
        } 
        else 
        { jcoup=icoup;
          icoup=i1iecn[icoup];
        }
      }
      
    }
  }
}

/* Output history for nodal forces, Fx, Fy */
static void YidNForces(nnopo,
                       d1ncix,d1nciy,
                       d1nfcx,d1nfcy,
                       nohys, dohyp, dctime,
                      d1ohys, d1ohyt, d1ohyx, d1ohyy,
                      i1ohyt)
  INT  nnopo;
  DBL *d1ncix; DBL  *d1nciy; DBL *d1nfcx; DBL *d1nfcy;
  INT   nohys; DBL    dohyp; DBL   dctime;
  DBL *d1ohys; DBL  *d1ohyt; DBL  *d1ohyx; DBL *d1ohyy;
  INT *i1ohyt;
{ DBL rpx, rpy, stprev;
  INT inode;
  INT ihys;

  for(inode=0;inode<nnopo;inode++)
  { for(ihys=0; ihys<nohys; ihys++)
    { rpx=d1ohyx[ihys];          /* x coordinate of point P */
      rpy=d1ohyy[ihys];          /* y coordinate of point P */
      if((d1ncix[inode]==rpx)&&(d1nciy[inode]==rpy))     /* if point is on a node */
      { if(i1ohyt[ihys]==(YFLDFX))                       /* nodal forces Fx       */
        { stprev=MAXIM((EPSILON),(ABS(d1ohys[ihys])));
          if((ABS(d1nfcx[inode]-stprev))>=dohyp)
          { d1ohyt[ihys] = dctime;                       /* output history time   */
            d1ohys[ihys] = d1nfcx[inode];                /* output history state  */
        } }
        else if(i1ohyt[ihys]==(YFLDFY))                  /* nodal forces Fy       */
        { stprev=MAXIM((EPSILON),(ABS(d1ohys[ihys])));
          if((ABS(d1nfcy[inode]-stprev))>=dohyp)
          { d1ohyt[ihys] = dctime;                       /* output history time   */
            d1ohys[ihys] = d1nfcy[inode];                /* output history state  */
  } } } } }
}

/*********************PUBLIC***********************/
void Yid(  ydc,  yde, ydi,  ydn, ydo, ydpe, ydpn, ydpj, ydpm     /***  nodal forces  ***/
        )
  YDC ydc; YDE yde; YDI ydi; YDN ydn; YDO ydo; YDPE ydpe; YDPN ydpn; YDPJ ydpj; YDPM ydpm;
{ INT iprop,jprop, i,j;

  if(ydi->micoup>0)
  { if(ydi->d2sldis == DBL2NULL)    /* initializing the array of sliding distances */
    {  ydi->d2sldis=TalDBL2(ydi->mistate,ydi->micoup);
       if(ydi->d2sldis!=DBL2NULL)
       { for(i=0; i<ydi->micoup; i++)
         { for(j=0;j<ydi->mistate;j++)
         { ydi->d2sldis[j][i]=R0;
    } } } }
    for(iprop=0;iprop<ydpe->nprop;iprop++)
    { if(((ydpe->i1ptyp[iprop])==(YTE2TRIELS))||      /* YTE2TRIELS = 1 */
         ((ydpe->i1ptyp[iprop])==(YTE2TRIRIG)))        /* YTE2TRIRIG = 2 */
      { for(jprop=iprop;jprop<ydpe->nprop;jprop++)
        { if(((ydpe->i1ptyp[jprop])==(YTE2TRIELS))||
             ((ydpe->i1ptyp[jprop])==(YTE2TRIRIG)))
          { Yid2TRITRI( /* Triangle to Triange */
            yde->nelem ,
            ydc->dcstec,ydi->diezon,iprop      ,jprop      ,
            ydi->d1iesl,ydn->d2ncc[0],ydn->d2ncc[1],ydn->d2nfc[0],ydn->d2nfc[1],
            ydn->d2nvc[0],ydn->d2nvc[1],
            ydpe->d1pepe,ydpe->d1pept, ydpe->d1pefr,
            yde->i1elcf,yde->i1elpr,
            &(ydi->iiecff),ydi->i1iecn,ydi->i1iect,yde->i2elto, ydi->d2sldis
            );
    } } } }
    for(iprop=0;iprop<ydpe->nprop;iprop++)
    { if(((ydpe->i1ptyp[iprop])==(YTE3TETELS))||
         ((ydpe->i1ptyp[iprop])==(YTE3TETELL)))
      { for(jprop=iprop;jprop<ydpe->nprop;jprop++)
        { if(((ydpe->i1ptyp[jprop])==(YTE3TETELS))||
             ((ydpe->i1ptyp[jprop])==(YTE3TETELL)))
           { Yid3TET2TET( /* tetrahedra to tetrahedra */
             yde->nelem ,ydc->ietype,
             ydc->dcstec,ydi->diezon,iprop,jprop,
             ydi->d1iesl,ydn->d2ncc[0],ydn->d2ncc[1],ydn->d2ncc[2],
             ydn->d2nfc[0],ydn->d2nfc[1],ydn->d2nfc[2],
             ydn->d2nvc[0],ydn->d2nvc[1],ydn->d2nvc[2],
             ydpe->d1pepe,yde->i1elcf,yde->i1elpr,
             &(ydi->iiecff),ydi->i1iecn,ydi->i1iect,yde->i2elto 
            );
           }
    } } }
  }
  /* Output history for nodal forces, Fx, Fy */
  YidNForces(ydn->nnopo,
             ydn->d2nci[0],ydn->d2nci[1],
             ydn->d2nfc[0],ydn->d2nfc[1],
             ydo->nohys, ydo->dohyp, ydc->dctime,
             ydo->d1ohys, ydo->d1ohyt, ydo->d1ohyx, ydo->d1ohyy,
             ydo->i1ohyt);
}
