/* Copyright (C) 2000, Dr. Antonio Munjiza
 *
 * This code is provided as part of the book entitled "The Combined
 * Finite Discrete Element Method". It is distributed WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. Inclusion of a part or whole of this code into any other
 * commercial or research or other purpose code is not granted without author's
 * written explicit permission.
 * When results using whole or any part of this code
 * are published, Y code must be mentioned and acknowledgement to Dr Munjiza must be made.
 * Should you modify this source code, the Copyright (C) on the modified code
 * as a whole belongs to Dr. A. Munjiza regardless of the extent or nature
 * of modifications.
 * Copyright (C) to whole of any code containing any part of this code
 * also belongs to Dr. A.Munjiza.
 * Any code comprising any part of this source code
 * must be called Y program.
 * If you do not agree with this, you are not allowed to do
 * any modifications to any part of this source code or included
 * any part of it in any other program.
 */
/* File   Ymd.c */
#include "Yproto.h"
/**************GRAINS G2 R=0.5**********/
/* File   Ymd.c */
#include "Yproto.h"
/**************MESH GRAINS***********/
static void Yjd3LTETRAHEDRA(    /* create joints between 4-nodes quadratic tetrahedral */
            IDprop, nelest, nnopst, nprop,
            i1jnef, i1jnen, i1next, iautbn,
            yde, ydn, ydpm)     /* Implemented by Zhou LEI, 29/04/2010                 */
 INT const IDprop; /*2 IDprop: propety of elements are going to be remeshed.  */
 INT const nelest; /*2 nelest: nb. of elements in the old mesh.               */
 INT const nnopst; /*2 nnopst: nb. of nodes in the old mesh.                  */
 INT const nprop;  /*2 nprop: nb. of element propety                          */
 INT const iautbn; /*2 iautbn: identify boundary nodes automatically or not   */
 INT *i1jnef, *i1jnen, *i1next;
 YDE yde; YDN ydn; YDPM ydpm; 
{ INT static itimes=0;
  INT *i1niid=INT1NULL, *i1ncnp=INT1NULL, **i2elcn=INT2NULL;
  INT melem = yde->melem,  nelem = yde->nelem;
  INT *i1elprtmp=yde->i1elprtmp;
  INT **i2elto=yde->i2elto;
  INT *i1elpr = yde->i1elpr;
  
  INT mnopo = ydn->mnopo,  nnopo = ydn->nnopo;
  DBL **d2ncc=ydn->d2ncc,  **d2nci=ydn->d2nci;
  DBL **d2nvc=ydn->d2nvc;
  INT *i1nobf=ydn->i1nobf, *i1nopr=ydn->i1nopr;
  
  INT **i2pmij = ydpm->i2pmij;
  INT mpmrow = ydpm->mpmrow;
  
  INT ielem, inopo, nb_elem, nb_node, irow;
  INT old_nid[4], new_nid[4], i, j, k, ifac;
  INT ij, id, ijn[3], kn, ijnew, itag, iod, ipropj, ismatch;
  
  INT const fac[4][3] = {1, 2, 3,
                         3, 2, 0,
                         3, 0, 1,
                         1, 0, 2};
                         
  INT const order[3][3]={0, 1, 2,
                         1, 2, 0,
                         2, 0, 1};
                         
  INT const  opord[3] = {0, 2, 1};
  
  /* allocate memory for variables only used with joint element */
  if(itimes==0)  
  { itimes = 1;
    if(ydn->i1niid==INT1NULL) ydn->i1niid=TalINT1I(mnopo, -1);
    if(ydn->i1ncnp==INT1NULL) ydn->i1ncnp=TalINT1I(mnopo, -1);
    if(yde->i2elcn==INT2NULL) yde->i2elcn=TalINT2I(2, melem, -1);
  }
  
  i1niid = ydn->i1niid;
  i1ncnp = ydn->i1ncnp;
  i2elcn = yde->i2elcn;
                        
  for(i=0; i<nnopst; i++) i1jnef[i]=-1;
  for(i=0; i<melem; i++) i1next[i]=-1;

  nb_elem = nelem;
  nb_node = nnopo;  
  for(ielem=0; ielem<nelest; ielem++)
  { if(i1elprtmp[ielem] != IDprop) continue;
    
    /* create new nodes */
    for(i=0; i<4; i++)
    { if(nb_node>=mnopo)
      { CHRw(stderr,"Yjd3: MNOPO too small"); CHRwcr(stderr);
        exit(1);
      }
      
      inopo = i2elto[i][ielem];
      old_nid[i] = inopo;
      
      new_nid[i] = nb_node;
      i2elto[i][ielem] = nb_node;
      for(j=0; j<3; j++)
      { d2ncc[j][nb_node] = d2ncc[j][inopo];
        d2nci[j][nb_node] = d2nci[j][inopo];
        d2nvc[j][nb_node] = d2nvc[j][inopo];
      }
      i1nobf[nb_node] = i1nobf[inopo];
      i1nopr[nb_node] = i1nopr[inopo];
      i1niid[nb_node] = inopo;       /* only work with joint element */
      Push_into_INT1(i1ncnp, inopo, nb_node);
      nb_node++;
    }
    
    /* create new joint element or connect to existent joint element */
    for(ifac=0; ifac<4; ifac++)
    { kn = -1;
      for(i=0; i<3; i++)
      { ij = fac[ifac][i];
        ijn[i] = old_nid[ij];
        kn = MAXIM(kn, ijn[i]);
      }
      
      /* check if joint element already existent */
      ijnew = i1jnef[kn];  
      while(ijnew >= 0)
      { itag = 0;                                 
        for(i=0; i<3; i++)
        { j = i+1; if(j>2) j=0;
          k = j+1; if(k>2) k=0;
          if(i2elto[3][ijnew] == ijn[i])
          { if(i2elto[4][ijnew]==ijn[j] && i2elto[5][ijnew]==ijn[k])
            { itag = 1; 
              iod = i;
            }
            break;
          }
        }
        
        if(itag == 1) /* joint element already existent */
        { for(i=0; i<3; i++)
          { ij = order[iod][i];
            ij = fac[ifac][ij];
            ij = new_nid[ij];
            i2elto[3+i][ijnew] = ij;
          }
          if(i1elpr[ielem] == i1elpr[i1next[ijnew]])
          { ismatch = 0;
            for(irow=0; irow<mpmrow; irow++)
            { if((i2pmij[0][irow] == i1elpr[ielem]) && 
                 (i2pmij[1][irow] == i1elpr[ielem]))
              { i1elpr[ijnew]=i2pmij[2][irow]+nprop;
                ismatch = 1;
                break;
              }
            }
          }
          else
          { ismatch = 0;
            for(irow=0; irow<mpmrow;irow++)
            { if((i2pmij[0][irow] == i1elpr[ielem]) ||
                 (i2pmij[1][irow] == i1elpr[ielem]) )
              { if((i2pmij[0][irow] == i1elpr[i1next[ijnew]]) ||
                   (i2pmij[1][irow] == i1elpr[i1next[ijnew]]) )
                { i1elpr[ijnew]=i2pmij[2][irow]+nprop; 
                  ismatch = 1;
                  break;
                }
              }
            }
          }
          if(ismatch==0)
          { i1elpr[ijnew]=i1elpr[ielem]-YIPROPMAX;
            CHRw(stdout,"Yjd3: Warning - mismatch joint property."); CHRwcr(stdout);
            CHRw(stdout,"      elpr[i]= "); INTw(stdout, i1elpr[ielem], 0); 
            CHRw(stdout,"      elpr[j]= "); INTw(stdout, i1elpr[i1next[ijnew]], 0);
            CHRwcr(stdout);
          }
          /* recording the connective elements for joint element */
          i2elcn[0][ijnew]=ielem; i2elcn[1][ijnew]=i1next[ijnew];
          ijnew = -100;
        }
        else
        { ijnew = i1jnen[ijnew-nelest];
        }
      }
      
      /* joint element not existent, then create one  */
      if(ijnew > -10)
      { if(nb_elem>=melem)
        { CHRw(stderr,"Yjd3: MELEM too small"); CHRwcr(stderr);
          exit(1);
        }
                                                  
        for(i=0; i<3; i++)
        { i2elto[i][nb_elem]=new_nid[fac[ifac][opord[i]]];
          i2elto[3+i][nb_elem]=old_nid[fac[ifac][opord[i]]];
        }
        
        ismatch=0;
        for(irow=0; irow<mpmrow;irow++)
        { if((i2pmij[0][irow]==i2pmij[1][irow])&&(i2pmij[0][irow]==i1elpr[ielem])) 
          { ipropj=i2pmij[2][irow]+nprop;
            ismatch=1;
          }
        }
        if(ismatch == 0)
        { i1elpr[ijnew]=i1elpr[ielem]-YIPROPMAX;
          CHRw(stdout,"Yjd3: Warning - mismatch joint property."); CHRwcr(stdout);
          CHRw(stdout,"      elpr[i]= "); INTw(stdout, i1elpr[ielem], 0); 
          CHRwcr(stdout);
        }
        i1elpr[nb_elem]=ipropj;
        i1next[nb_elem]=ielem;
        i1jnen[nb_elem-nelest]=i1jnef[kn];
        i1jnef[kn]=nb_elem;
        
        nb_elem++;
      }

    }
  }
  for(ielem=nelest; ielem<nb_elem; ielem++)
  {if(i2elto[3][ielem]<nnopst)
    { for(i=0; i<3; i++)
      { i2elto[i+3][ielem] = i2elto[i][ielem];
        if(iautbn > 0) /* identify the boundary nodes automatically */
        { i1nobf[i2elto[i][ielem]]=1;
          ij = i1niid[i2elto[i][ielem]];
          while(1)
          { id=Get_from_INT1(i1ncnp, ij);
            if(id==-1) break; 
            i1nobf[id]=1;
          }
        }
      }
      i1elpr[ielem]=-YIPROPMAX;
    }
  }
  yde->nelem = nb_elem;
  ydn->nnopo = nb_node;
}

/**************JOINT ELEMENTS***********/
static void Yjd2TRIANGLE(  /* mesh triangle  */
             melem,mnopo ,nelest,nnopst,
             iprop, i2pmij, mpmrow, nprop,
            n0elem,n0nopo,
            d1nccx,d1nccy,d1ncix,d1nciy,d1nvcx,
            d1nvcy,d1sdel,
            i1elpr, i1elprtmp, i1jnef,i1jnen,i1next, i1nobf,i1nopr,
            i2elto
            )
  INT    melem; INT   mnopo; INT  nelest; INT  nnopst;
  INT    iprop; INT **i2pmij; INT mpmrow; INT nprop;
  INT *n0elem; INT  *n0nopo;
  DBL *d1nccx; DBL  *d1nccy; DBL *d1ncix; DBL  *d1nciy; DBL *d1nvcx;
  DBL *d1nvcy; DBL  *d1sdel;
  INT *i1elpr; INT  *i1elprtmp; INT *i1jnef; INT *i1jnen; INT *i1next; INT *i1nobf; INT *i1nopr;
  INT **i2elto;
{ INT nelem, nnopo;
  INT i,j,in,jn,kn,ijnew,ielem,irow;
  INT ipropj = -1;

  nelem=(*n0elem);
  nnopo=(*n0nopo);
  for(ielem=0;ielem<nelest;ielem++)
  { if(i1elprtmp[ielem]==iprop)
    { for(i=0;i<3;i++)
      { j=i+1; if(j>2)j=0;
        in=i2elto[i][ielem];
        jn=i2elto[j][ielem];
        kn=MAXIM(in,jn);
        if(nnopo>=mnopo)      /* create new node */
        { CHRw(stderr,"Yjd: MNOPO too small"); CHRwcr(stderr);
          exit(1);
        }
        d1nccx[nnopo]=d1nccx[in];
        d1nccy[nnopo]=d1nccy[in];
        d1ncix[nnopo]=d1ncix[in];
        d1nciy[nnopo]=d1nciy[in];
        d1nvcx[nnopo]=d1nvcx[in];
        d1nvcy[nnopo]=d1nvcy[in];
        i1nopr[nnopo]=i1nopr[in];
        i1nobf[nnopo]=1;
        nnopo=nnopo+1;
        /* check if joint element already existent */
        ijnew=i1jnef[kn];
        while(ijnew>=0)
        { if((i2elto[2][ijnew]==in)&&(i2elto[3][ijnew]==jn))
          { if(i1elpr[ielem] == i1elpr[i1next[ijnew]])
            { for(irow=0; irow<mpmrow;irow++)
              { if( (i2pmij[0][irow] == i1elpr[ielem]) &&
                    (i2pmij[1][irow] == i1elpr[ielem]) )
                { i1elpr[ijnew]=i2pmij[2][irow]+nprop;
            } } }
            else if(i1elpr[ielem] != i1elpr[i1next[ijnew]])
            { for(irow=0; irow<mpmrow;irow++)
              { if( (i2pmij[0][irow] == i1elpr[ielem]) ||
                    (i2pmij[1][irow] == i1elpr[ielem]) )
                { if( (i2pmij[0][irow] == i1elpr[i1next[ijnew]]) ||
                      (i2pmij[1][irow] == i1elpr[i1next[ijnew]]) )
                  { i1elpr[ijnew]=i2pmij[2][irow]+nprop;
            } } } }
            if(i<2)
            { i2elto[2][ijnew]=nnopo-1;
              i2elto[3][ijnew]=nnopo;
            }
            else
            { i2elto[2][ijnew]=nnopo-1;
              i2elto[3][ijnew]=nnopo-3;
            }
            ijnew=-100;
          }
          else
          { ijnew=i1jnen[ijnew-nelest];
        } }
        /* create new mid-edge joint node  */
        if(ijnew>(-10))
        { if(nelem>=melem)
          { CHRw(stderr,"Yjd: MELEM too small"); CHRwcr(stderr);
            exit(1);
          }
          if(i<2)
          { i2elto[1][nelem]=nnopo;
            i2elto[0][nelem]=nnopo-1;
          }
          else
          { i2elto[1][nelem]=nnopo-3;
            i2elto[0][nelem]=nnopo-1;
          }
          i2elto[2][nelem]=jn;
          i2elto[3][nelem]=in;

          for(irow=0; irow<mpmrow;irow++)
          {
            if(i2pmij[0][irow] == i2pmij[1][irow])
              if(i2pmij[0][irow] == i1elpr[ielem])
                ipropj=i2pmij[2][irow]+nprop;
          }
          i1elpr[nelem]=ipropj;
          i1next[nelem]=ielem;
          i1jnen[nelem-nelest]=i1jnef[kn];
          i1jnef[kn]=nelem;
          nelem=nelem+1;
      } }
      for(i=0;i<3;i++) /* detach element */
      { i2elto[i][ielem]=nnopo-3+i;
      }
  } }
  for(ielem=nelest;ielem<nelem;ielem++)
  { if(d1sdel!=DBL1NULL)d1sdel[ielem]=R0;
    for(i=2;i<4;i++)
    if(i2elto[2][ielem]<nnopst)
    { i2elto[3][ielem]=i2elto[0][ielem];
      i2elto[2][ielem]=i2elto[1][ielem];
      i1elpr[ielem]=-YIPROPMAX;
  } }
  (*n0nopo)=nnopo;
  (*n0elem)=nelem;
}


/**************MESH ELEMENTS***********/
static void Ymd2TRIANGLE(  /* mesh triangle  */
             melem,mnopo ,nelest,nnopst,
             ipemb,iprop ,
            n0elem,n0nopo,
            d1nccx,d1nccy,d1ncix,d1nciy,d1nvcx,
            d1nvcy,d1sdel,i1elpr, i1elprtmp, i1mnnf,i1mnnn,
            i1nobf,i1nopr,i2elto
            )
  INT    melem; INT   mnopo; INT  nelest; INT  nnopst;
  INT    ipemb; INT   iprop;
  INT *n0elem; INT  *n0nopo;
  DBL *d1nccx; DBL  *d1nccy; DBL *d1ncix; DBL  *d1nciy; DBL *d1nvcx;
  DBL *d1nvcy; DBL  *d1sdel; INT  *i1elpr; INT *i1elprtmp; INT *i1mnnf; INT *i1mnnn;
  INT *i1nobf; INT *i1nopr; INT **i2elto;
{ INT nelem, nnopo;
  DBL x,y;
  INT i,j,in,jn,innew,ielem,jelem;
  INT i1t[9]={3,0,2, 4,1,0, 5,2,1};
  INT i1new[6];

  nelem=(*n0elem);
  nnopo=(*n0nopo);
  for(ielem=0;ielem<nelest;ielem++)
  { if(i1elprtmp[ielem]==iprop)
    { for(i=0;i<3;i++)
      { i1new[i+3]=i2elto[i][ielem];
        /* set mid-edge node */
        j=i+1; if(j>2)j=0;
        in=MAXIM(i2elto[i][ielem],i2elto[j][ielem]);
        jn=MINIM(i2elto[i][ielem],i2elto[j][ielem]);
        x=(d1nccx[in]+d1nccx[jn])/R2;
        y=(d1nccy[in]+d1nccy[jn])/R2;
        /* check if mid-edge node already existent */
        innew=i1mnnf[in];
        while(innew>=0)
        { if(ABS(x-d1nccx[innew])+ABS(y-d1nccy[innew])<EPSILON)
          { i1new[i]=innew;
            i1nobf[innew]=0;  /* not a boundary node */
            break;
          }
          innew=i1mnnn[innew-nnopst];
        }
        /* if non-existent, create new mid-edge node */
        if(innew<0)
        { if(nnopo>mnopo)
          { CHRw(stderr,"Ymd: MNOPO too small"); CHRwcr(stderr);
            exit(1);
          }
          i1new[i]=nnopo;
          d1nccx[nnopo]=x;
          d1nccy[nnopo]=y;
          d1ncix[nnopo]=(d1ncix[in]+d1ncix[jn])/R2;
          d1nciy[nnopo]=(d1nciy[in]+d1nciy[jn])/R2;
          d1nvcx[nnopo]=(d1nvcx[in]+d1nvcx[jn])/R2;
          d1nvcy[nnopo]=(d1nvcy[in]+d1nvcy[jn])/R2;
          i1nopr[nnopo]=MINIM(i1nopr[in],i1nopr[jn]);
          i1nobf[nnopo]=1;      /* assume that it is a boundary */
          i1mnnn[nnopo-nnopst]=i1mnnf[in];
          i1mnnf[in]=nnopo;
          nnopo=nnopo+1;
      } }
      /* create new elements */
      i=0;
      for(jelem=0;jelem<3;jelem++)
      { for(in=0;in<3;in++)
        { i2elto[in][nelem]=i1new[i1t[i]];
          i=i+1;
        }
        i1elpr[nelem]=i1elpr[ielem];
        if(d1sdel!=DBL1NULL)d1sdel[nelem]=d1sdel[ielem];
        nelem=nelem+1;
        if(nelem>melem)
        { CHRw(stderr,"Ymd: MELEM too small"); CHRwcr(stderr);
          exit(1);
      } }
      for(in=0;in<3;in++)
      { i2elto[in][ielem]=i1new[in];
      }
      if(ipemb<1)
      { for(i=0;i<6;i++)
        { i1nobf[i1new[i]]=1;
      } }
  } }
  (*n0nopo)=nnopo;
  (*n0elem)=nelem;
}
static void Ymdicsreted2TRIANGLE(  /* mesh triangle discrete */
             melem,mnopo ,nelest,nnopst,
            iprop ,
            n0elem,n0nopo,
            d1nccx,d1nccy,d1ncix,d1nciy,d1nvcx,
            d1nvcy,i1elpr,i1nobf,i1nopr,i2elto
            )
  INT    melem; INT   mnopo; INT  nelest; INT  nnopst;
  INT    iprop;
  INT *n0elem; INT  *n0nopo;
  DBL *d1nccx; DBL  *d1nccy; DBL *d1ncix; DBL *d1nciy; DBL  *d1nvcx;
  DBL *d1nvcy; INT  *i1elpr; INT *i1nobf; INT *i1nopr; INT **i2elto;
{ INT nelem, nnopo;
  INT i,ielem,inopo;
  nelem=(*n0elem);
  nnopo=(*n0nopo);
  for(ielem=0;ielem<nelest;ielem++)
  { if(i1elpr[ielem]==iprop)
    { for(i=0;i<3;i++)
      { inopo=i2elto[i][ielem];
        d1nccx[nnopo]=d1nccx[inopo];
        d1nccy[nnopo]=d1nccy[inopo];
        d1ncix[nnopo]=d1ncix[inopo];
        d1nciy[nnopo]=d1nciy[inopo];
        d1nvcx[nnopo]=d1nvcx[inopo];
        d1nvcy[nnopo]=d1nvcy[inopo];
        i1nopr[nnopo]=i1nopr[inopo];
        i1nobf[nnopo]=1;
        if(nnopo>mnopo)
        { CHRw(stderr,"Ymd: MNOPO too small"); CHRwcr(stderr);
          exit(1);
        }
        i2elto[i][ielem]=nnopo;
        nnopo=nnopo+1;
  } } }
  (*n0nopo)=nnopo;
  (*n0elem)=nelem;
}
static void Ymdskewed2TRIANGLE(  /* mesh triangle  skewed */
             melem,mnopo ,nelest,nnopst,
             ipemb,iprop ,
            n0elem,n0nopo,
            d1nccx,d1nccy,d1ncix,d1nciy,d1nvcx,
            d1nvcy,d1sdel,i1elpr, i1elprtmp, i1mnnf,i1mnnn,
            i1nobf,i1nopr,i2elto
            )
  INT    melem; INT   mnopo; INT  nelest; INT  nnopst;
  INT    ipemb; INT   iprop;
  INT *n0elem; INT  *n0nopo;
  DBL *d1nccx; DBL  *d1nccy; DBL *d1ncix; DBL  *d1nciy; DBL *d1nvcx;
  DBL *d1nvcy; DBL  *d1sdel; INT  *i1elpr; INT *i1elprtmp; INT *i1mnnf; INT *i1mnnn;
  INT *i1nobf; INT *i1nopr; INT **i2elto;
{ INT nelem, nnopo;
  DBL x,y;
  INT i,j,k,in,jn,innew,ielem,jelem,kelem;
  INT i1t[18]={3,0,6,  0,4,6, 4,1,6,  1,5,6,  5,2,6,  2,3,6};
  INT i1new[7];

  nelem=(*n0elem);
  nnopo=(*n0nopo);
  for(ielem=0;ielem<nelest;ielem++)
  { if(i1elprtmp[ielem]==iprop)
    { for(i=0;i<3;i++)
      { i1new[i+3]=i2elto[i][ielem];
        /* set mid-edge node */
        j=i+1; if(j>2)j=0;
        in=MAXIM(i2elto[i][ielem],i2elto[j][ielem]);
        jn=MINIM(i2elto[i][ielem],i2elto[j][ielem]);
        x=(d1nccx[in]+d1nccx[jn])/R2;
        y=(d1nccy[in]+d1nccy[jn])/R2;
        /* check if mid-edge node already existent */
        innew=i1mnnf[in];
        while(innew>=0)
        { if(ABS(x-d1nccx[innew])+ABS(y-d1nccy[innew])<EPSILON)
          { i1new[i]=innew;
            i1nobf[innew]=0;  /* not a boundary node */
            break;
          }
          innew=i1mnnn[innew-nnopst];
        }
        /* if non-existent, create new mid-edge node */
        if(innew<0)
        { if(nnopo>mnopo)
          { CHRw(stderr,"Ymd: MNOPO too small"); CHRwcr(stderr);
            exit(1);
          }
          i1new[i]=nnopo;
          d1nccx[nnopo]=x;
          d1nccy[nnopo]=y;
          d1ncix[nnopo]=(d1ncix[in]+d1ncix[jn])/R2;
          d1nciy[nnopo]=(d1nciy[in]+d1nciy[jn])/R2;
          d1nvcx[nnopo]=(d1nvcx[in]+d1nvcx[jn])/R2;
          d1nvcy[nnopo]=(d1nvcy[in]+d1nvcy[jn])/R2;
          i1nopr[nnopo]=MINIM(i1nopr[in],i1nopr[jn]);
          i1nobf[nnopo]=1;      /* assume that it is a boundary */
          i1mnnn[nnopo-nnopst]=i1mnnf[in];
          i1mnnf[in]=nnopo;
          nnopo=nnopo+1;
      } }
      /* create new central node */
      if(nnopo>mnopo)
      { CHRw(stderr,"Ymd: MNOPO too small"); CHRwcr(stderr);
        exit(1);
      }
      i=i1new[3];
      j=i1new[4];
      k=i1new[5];
      i1new[6]=nnopo;
      d1nccx[nnopo]=(d1nccx[i]+d1nccx[j]+d1nccx[k])/R3;
      d1nccy[nnopo]=(d1nccy[i]+d1nccy[j]+d1nccy[k])/R3;
      d1ncix[nnopo]=(d1ncix[i]+d1ncix[j]+d1ncix[k])/R3;
      d1nciy[nnopo]=(d1nciy[i]+d1nciy[j]+d1nciy[k])/R3;
      d1nvcx[nnopo]=(d1nvcx[i]+d1nvcx[j]+d1nvcx[k])/R3;
      d1nvcy[nnopo]=(d1nvcy[i]+d1nvcy[j]+d1nvcy[k])/R3;
      i1nopr[nnopo]=MINIM(i1nopr[k],MINIM(i1nopr[i],i1nopr[j]));
      i1nobf[nnopo]=0;      /* assume that it is not a boundary */
      nnopo=nnopo+1;
      /* create new elements */
      i=0;
      for(jelem=0;jelem<6;jelem++)
      { if(jelem==0)
        { kelem=ielem;
        }
        else
        { kelem=nelem;
          if(nelem>melem)
          { CHRw(stderr,"Ymd: MELEM too small"); CHRwcr(stderr);
            exit(1);
          }
          nelem=nelem+1;
        }
        for(in=0;in<3;in++)
        { i2elto[in][kelem]=i1new[i1t[i]];
          i=i+1;
        }
        i1elpr[kelem]=i1elpr[ielem];
        if(d1sdel!=DBL1NULL)d1sdel[kelem]=d1sdel[ielem];
      }
      if(ipemb<1)
      { for(i=0;i<6;i++)
        { i1nobf[i1new[i]]=1;
      } }
  } }
  (*n0nopo)=nnopo;
  (*n0elem)=nelem;
}
/*********************PUBLIC********************************************************/
void Ymd(   ydc, yde, ydi, ydn, ydpe, ydpn, ydpm    /***  mesh elements  ***/
        )
  YDC ydc; YDE yde; YDI ydi;  YDN ydn; YDPE ydpe; YDPN ydpn; YDPM ydpm;
{ INT nelest, nnopst;
  INT iprop;
  INT icom, i, ielem, irow, iptyp;
  INT inopo;
  INT imesh,imestyp;
  INT nProps;         /* max of number Pr sets to be meshed together in one line of i2pmset  */
  INT idpro;
  INT *i1mnnf;        /* mesh node new first for each old node                               */
  INT *i1mnnn;        /* mesh node new next for each new node                                */
  INT *i1jnef;        /* joint node element first for each old node                          */
  INT *i1jnen;        /* joint node element next for each new joint                          */
  DBL *d1sdel;
  INT *i1next;        /* stores index of the element next to joint                           */
  INT *i1isMeshing;   /* indicates if meshing is allowed for the selected Pr Set,
                         only if prtype = YTE2TRIELS || YTE2TRIRIG */

  if(ydpe->i1pejp==INT1NULL)
  { ydpe->i1pejp=TalINT1(ydpe->mprop);
  }
  i1isMeshing=INT1NULL;
  i1isMeshing=TalINT1(ydpm->mpmcom);
  for(icom=0;icom<ydpm->mpmcom;icom++)
  { i1isMeshing[icom]=-1;  
  }
  
  for(icom=0;icom<ydpm->mpmcom;icom++)
  { nProps=ydpm->i2pmset[0][icom];
    for(i=0; i<nProps; i++)
    { idpro=ydpm->i2pmset[2+i][icom];
      if( (ydpe->i1ptyp[idpro]==YTE2TRIELS) || (ydpe->i1ptyp[idpro]==YTE2TRIRIG) ||
          (ydpe->i1ptyp[idpro]==YTE3TETELS) || (ydpe->i1ptyp[idpro]==YTE3TETELL) )
      { i1isMeshing[icom]=1;
      }
      else
      { i1isMeshing[icom]=-1;
        CHRw(stderr, "Warning: pls check the I2PMSET.\n");
  } } }
  
  for(imesh=0;imesh<10;imesh++)
  { nelest=yde->nelem;
    nnopst=ydn->nnopo;
    i1mnnf=INT1NULL;
    i1mnnn=INT1NULL;
    i1jnef=INT1NULL;
    i1jnen=INT1NULL;
    i1next=INT1NULL;
    for(icom=0;icom<ydpm->mpmcom;icom++)
    { iprop = ydpm->i2pmset[2][icom];
      imestyp=ydpm->i2pmset[1][icom]%10;
      ydpm->i2pmset[1][icom]=ydpm->i2pmset[1][icom]/10;
      if(i1isMeshing[icom]>0&&imestyp>0)
      { for(irow=0; irow<ydpm->mpmrow; irow++)
        { if(ydpm->i2pmij[0][irow] == ydpm->i2pmij[1][irow])
          { ydpe->i1pejp[ydpm->i2pmij[0][irow]] = ydpm->i2pmij[2][irow];
        } }
        d1sdel=yde->d2elst[ydpe->i1psde[iprop]];
        if(imestyp>0)    /* construct i1elprtmp only when refining! */
        { for(i=0; i<ydpm->i2pmset[0][icom]; i++)
          { iptyp = ydpe->i1ptyp[ydpm->i2pmset[2+i][icom]];
            for(ielem=0; ielem<yde->nelem; ielem++)
            { if(yde->i1elpr[ielem] == ydpm->i2pmset[2+i][icom])
              {  yde->i1elprtmp[ielem]=icom+prArbit;
        } } } }
        
        if(ydn->nnodim==2)
        { if(imestyp==1)
          { if(i1mnnf==INT1NULL)
            { ydi->diedi=ydi->diezon+ydi->diezon;
              i1mnnf=TalINT1(nnopst);
              i1mnnn=TalINT1(3*nelest);
              for(inopo=0;inopo<nnopst;inopo++)
              { i1mnnf[inopo]=-1;
              }
            }
            iprop = icom+prArbit;
            Ymd2TRIANGLE(  /* mesh triangle  */
            yde->melem   ,ydn->mnopo   ,nelest       ,nnopst     ,
            ydpe->i1pemb[ydpm->i2pmset[2][icom]],iprop ,
            &(yde->nelem),&(ydn->nnopo),
            ydn->d2ncc[0],ydn->d2ncc[1],ydn->d2nci[0],ydn->d2nci[1],ydn->d2nvc[0],
            ydn->d2nvc[1],     d1sdel,yde->i1elpr, yde->i1elprtmp, i1mnnf     ,i1mnnn     ,
            ydn->i1nobf,ydn->i1nopr,yde->i2elto
            );
          }
          else if(imestyp==2)
          { if(i1mnnf==INT1NULL)
            { ydi->diedi=ydi->diezon+ydi->diezon;
              i1mnnf=TalINT1(nnopst);
              i1mnnn=TalINT1(3*nelest);
              for(inopo=0;inopo<nnopst;inopo++)
              { i1mnnf[inopo]=-1;
              }
            }
            iprop = icom+prArbit;
            Ymdskewed2TRIANGLE(  /* skew triangle  */
            yde->melem   ,ydn->mnopo   ,nelest       ,nnopst     ,
            ydpe->i1pemb[ydpm->i2pmset[2][icom]],iprop ,
            &(yde->nelem),&(ydn->nnopo),
            ydn->d2ncc[0],ydn->d2ncc[1],ydn->d2nci[0],ydn->d2nci[1],ydn->d2nvc[0],
            ydn->d2nvc[1],     d1sdel,yde->i1elpr, yde->i1elprtmp, i1mnnf     ,i1mnnn     ,
            ydn->i1nobf,ydn->i1nopr,yde->i2elto
            );
          }
          else if(imestyp==3)
          { if(i1jnef==INT1NULL)
            { ydi->diedi=ydi->diezon+ydi->diezon;
              i1jnef=TalINT1(nnopst);
              i1jnen=TalINT1(3*nelest);
              i1next=TalINT1(yde->melem);
              for(inopo=0;inopo<nnopst;inopo++)
              { i1jnef[inopo]=-1;
              }
              for(ielem=0;ielem<nelest;ielem++)
              { i1next[ielem]=-1;
              }
            }
            iprop = icom+prArbit;
            Yjd2TRIANGLE(  /* create joints  */
            yde->melem   ,ydn->mnopo   ,nelest       ,nnopst     ,
            iprop, ydpm->i2pmij, ydpm->mpmrow, ydpe->nprop,
            &(yde->nelem),&(ydn->nnopo),
            ydn->d2ncc[0],ydn->d2ncc[1],ydn->d2nci[0],ydn->d2nci[1],ydn->d2nvc[0],
            ydn->d2nvc[1],d1sdel,
            yde->i1elpr, yde->i1elprtmp, i1jnef,i1jnen, i1next, ydn->i1nobf,ydn->i1nopr,
            yde->i2elto
            );
          }
          else if(imestyp==4)
          { ydi->diedi=ydi->diezon+ydi->diezon;
            Ymdicsreted2TRIANGLE(  /* separate triangle  */
            yde->melem   ,ydn->mnopo   ,nelest       ,nnopst     ,
            iprop ,
            &(yde->nelem),&(ydn->nnopo),
            ydn->d2ncc[0],ydn->d2ncc[1],ydn->d2nci[0],ydn->d2nci[1],ydn->d2nvc[0],
            ydn->d2nvc[1],yde->i1elpr,ydn->i1nobf,ydn->i1nopr,yde->i2elto
            );
          }
        }
        
        if(ydn->nnodim==3)
        { if(imestyp==3)
          { if(i1jnef == INT1NULL) i1jnef = TalINT1I(nnopst, -1);
            if(i1jnen == INT1NULL) i1jnen = TalINT1I(4*nelest, -1);
            if(i1next == INT1NULL) i1next = TalINT1I(yde->melem, -1);
            iprop = icom+prArbit;
            if(iptyp==YTE3TETELL)
            { Yjd3LTETRAHEDRA(iprop, nelest, nnopst, ydpe->nprop,
                              i1jnef, i1jnen, i1next, ydpm->iautbn,
                              yde, ydn, ydpm);
            }
            else
            { CHRw(stderr,"Error: pls check element type in Ymd - 4.\n");
            }
          }
        }
      }
    }
    /* free memory */
    FREE(i1mnnn);
    FREE(i1mnnf);
    FREE(i1jnef);
    FREE(i1jnen);
    FREE(i1next);
  }
}
