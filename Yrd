/* Copyright (C) 2000, Dr. Antonio Munjiza
 *
 * This code is provided as part of the book entitled "The Combined
 * Finite Discrete Element Method". It is distributed WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. Inclusion of a part or whole of this code into any other
 * commercial or research or other purpose code is not granted without author's
 * written explicit permission.
 * When results using whole or any part of this code
 * are published, Y code must be mentioned and acknowledgement to Dr Munjiza must be made.
 * Should you modify this source code, the Copyright (C) on the modified code
 * as a whole belongs to Dr. A. Munjiza regardless of the extent or nature
 * of modifications.
 * Copyright (C) to whole of any code containing any part of this code
 * also belongs to Dr. A.Munjiza.
 * Any code comprising any part of this source code
 * must be called Y program.
 * If you do not agree with this, you are not allowed to do
 * any modifications to any part of this source code or included
 * any part of it in any other program.
 */
/* File  Yrd.c */
#include "Yproto.h"
static  CHR *cdig="0123456789";
#define ILLEGITIMATEMSG(nfunc) { CHRw(stderr,(nfunc));\
            CHRw(stderr,": illegitimate parameter definition - ");\
            CHRw(stderr,name); CHRwcr(stderr); exit(103); }

static void Yrdc(ydc,finp,name)
  YDC ydc; FILE *finp; CHR *name;
{ CHR *namep;

  namep=name+8;
  if(CHRcmp(namep,"MCSTEP",6)==0)
  { INTr(finp,&(ydc->mcstep));
  }
  else if(CHRcmp(namep,"NCSTEP",6)==0)
  { INTr(finp,&(ydc->ncstep));
  }
  else if(CHRcmp(namep,"DCGRAX",6)==0)
  { DBLr(finp,&(ydc->dcgrax));
  }
  else if(CHRcmp(namep,"DCGRAY",6)==0)
  { DBLr(finp,&(ydc->dcgray));
  }
  else if(CHRcmp(namep,"DCGRAZ",6)==0)
  { DBLr(finp,&(ydc->dcgraz));
  }
  else if(CHRcmp(namep,"DCSIZC",6)==0)
  { DBLr(finp,&(ydc->dcsizc));
    if(ydc->dcsizc<R0) ILLEGITIMATEMSG("Yrdc");
  }
  else if(CHRcmp(namep,"DCSIZF",6)==0)
  { DBLr(finp,&(ydc->dcsizf));
    if(ydc->dcsizf<R0) ILLEGITIMATEMSG("Yrdc");
  }
  else if(CHRcmp(namep,"DCSIZS",6)==0)
  { DBLr(finp,&(ydc->dcsizs));
    if(ydc->dcsizs<R0) ILLEGITIMATEMSG("Yrdc");
  }
  else if(CHRcmp(namep,"DCSIZV",6)==0)
  { DBLr(finp,&(ydc->dcsizv));
    if(ydc->dcsizv<R0) ILLEGITIMATEMSG("Yrdc");
  }
  else if(CHRcmp(namep,"DCSTEC",6)==0)
  { DBLr(finp,&(ydc->dcstec));
    if(ydc->dcstec<R0) ILLEGITIMATEMSG("Yrdc");
  }
  else if(CHRcmp(namep,"DCTIME",6)==0)
  { DBLr(finp,&(ydc->dctime));
  }
  else if(CHRcmp(namep,"DCURELX",7)==0) 
  { DBLr(finp,&(ydc->dcurelx));
  }
  else if(CHRcmp(namep,"INITER",6)==0) 
  { INTr(finp,&(ydc->initer));
  }
  else if(CHRcmp(namep,"ICOUTT",6)==0) 
  { INTr(finp,&(ydc->icoutt));
    if(ydc->icoutt!=0) ydc->icoutt = 1;
  }
  else if(CHRcmp(namep,"ICOUTF",6)==0)
  { INTr(finp,&(ydc->icoutf));
    if(ydc->icoutf<=0) ydc->icoutf = 10;
  }
  else if(CHRcmp(namep,"ICOUTI",6)==0)
  { INTr(finp,&(ydc->icouti));
    if(ydc->icouti<0) ydc->icouti = 0;
  }
  else if(CHRcmp(namep,"ICOUTP",6)==0)
  { INTr(finp,&(ydc->icoutp));
    if(ydc->icoutp<0) ydc->icoutp = 4;
  }
  else if(CHRcmp(namep,"ICSHTF", 6)==0)
  { INTr(finp,&(ydc->icshtf));
    if(ydc->icshtf<=0) ydc->icshtf = 100;
  }
  else if(CHRcmp(namep,"IWFAST",6)==0) 
  { INTr(finp,&(ydc->iwfast));
    if(ydc->iwfast<0) ydc->iwfast = 1;
  }
  else
  { CHRw(stderr,"Yrdc: unknown name: ");
    CHRw(stderr,name);
    CHRwcr(stderr);
    exit(103);
} }

static void Yrdd(yd) /* default values */
   YD yd;
{ YDC ydc=&(yd->ydc);
  YDE yde=&(yd->yde);
  YDI ydi=&(yd->ydi);
  YDN ydn=&(yd->ydn);
  YDB ydb=&(yd->ydb);
  YDS yds=&(yd->yds);
  YDO ydo=&(yd->ydo);
  YDPE ydpe=&(yd->ydpe);
  YDPN ydpn=&(yd->ydpn);
  YDPJ ydpj=&(yd->ydpj);
  YDPM ydpm=&(yd->ydpm);
  INT i;

  /* Set Control to default   */
  ydc->mcstep=0; ydc->ncstep=0;
  ydc->cruntime[0]='\0';
  ydc->cfiname[0]='\0';
  ydc->finp=(FILE*)NULL;
  ydc->fcheck=(FILE*)NULL;
  ydc->nfile=0;
  for(i=0;i<10;i++)
  { ydc->files[i]=FILENULL;
  }
  ydc->dcgrax=R0;
  ydc->dcgray=R0;
  ydc->dcgraz=R0;
  ydc->dcsizc=R1;
  ydc->dcsizf=R1;
  ydc->dcsizs=R1;
  ydc->dcsizv=R1;
  ydc->dcstec=R0;
  ydc->dctime=R0;
  ydc->dcurelx=R1;
  ydc->initer=2;
  ydc->icoutt=0;
  ydc->icoutf=10;
  ydc->icouti=0;
  ydc->icoutp=4;
  ydc->icshtf=100;
  ydc->iwfast=1;
  ydc->ietype=-1;

/* Set Elements to default    */
  yde->melem=0; yde->nelem=0;
  yde->melst=0; yde->nelst=0;
  yde->melno=0; yde->nelno=0;
  yde->i1elcf=INT1NULL;
  yde->i1elpr=INT1NULL;
  yde->i1elprtmp=INT1NULL;
  yde->d1elfs=DBL1NULL;
  yde->d2elst=DBL2NULL;
  yde->i2elto=INT2NULL;
  yde->d3tcs=DBL3NULL;
  yde->d1emct=DBL1NULL;
  yde->i1elbe=INT1NULL;
  yde->i2elcn=INT2NULL;

 /* Set Interaction to default */
  ydi->micoup=0; ydi->nicoup=0;
  ydi->mistate=0;  
  ydi->iiecff=-2;
  ydi->diedi=BEPSILON;
  ydi->diezon=R0;
  ydi->d1iesl=DBL1NULL;
  ydi->i1iecn=INT1NULL;
  ydi->i1iect=INT1NULL;
  ydi->d2sldis=DBL2NULL;
  
  /* Set Nodes to default  */
  ydn->mnodim=0;  ydn->nnodim=0;
  ydn->mnopo=0;  ydn->nnopo=0;
  ydn->d1nmct=DBL1NULL;
  ydn->d2ncc=DBL2NULL;
  ydn->d2nci=DBL2NULL;
  ydn->d2nfc=DBL2NULL;
  ydn->d2nft=DBL2NULL;
  ydn->d2nvc=DBL2NULL;
  ydn->i1nobf=INT1NULL;
  ydn->i1nopr=INT1NULL;
  ydn->i1niid=INT1NULL;
  ydn->i1ncnp=INT1NULL;
  
  /* Set Boreholes to default */
  ydb->mborh=0; ydb->nborh=0;
  ydb->mbdim=0; ydb->nbdim=0;
  ydb->nbpaf=0;
  ydb->d2bca=DBL2NULL;
  ydb->d2bcb=DBL2NULL;
  ydb->d1brad=DBL1NULL;
  ydb->d1bpaf=DBL1NULL;
  ydb->d1bpts=DBL1NULL;
  ydb->d1bpte=DBL1NULL;
  ydb->d1bvdt=DBL1NULL;
  ydb->d1bprs=DBL1NULL;
  ydb->dblmax=R0;
  ydb->dbbuf=R0;
  
  /* Set Sources to default */
  yds->msour=0; yds->nsour=0;
  yds->msdim=0; yds->nsdim=0;
  yds->nspaf=0;
  yds->nssaf=0;
  yds->d2scs=DBL2NULL;
  yds->d1spaf=DBL1NULL;
  yds->d1ssaf=DBL1NULL;
  yds->d1spts=DBL1NULL;
  yds->d1spte=DBL1NULL;
  yds->d1svpr=DBL1NULL;
  yds->d1sprs=DBL1NULL;
  yds->d1ssir=DBL1NULL;
  yds->dsbuf=R0;
  /* Set Output to default  */
  ydo->mohys=0;  ydo->nohys=0;
  ydo->dohyp=0.05;  /* 5% accuracy */
  ydo->d1ohyc=DBL1NULL;
  ydo->d1ohyf=DBL1NULL;
  ydo->d1ohys=DBL1NULL;
  ydo->d1ohyt=DBL1NULL;
  ydo->d1ohyx=DBL1NULL;
  ydo->d1ohyz=DBL1NULL;
  ydo->d1ohyy=DBL1NULL;
  ydo->i1ohyt=INT1NULL;
  /* Set Properties to default  */
  /* element property database	*/
  ydpe->mprop=0; ydpe->nprop=0;
  ydpe->d1peca=DBL1NULL;
  ydpe->d1pecl=DBL1NULL;
  ydpe->d1peks=DBL1NULL;
  ydpe->d1pela=DBL1NULL;
  ydpe->d1pemu=DBL1NULL;
  ydpe->d1pepe=DBL1NULL;
  ydpe->d1pept=DBL1NULL;
  ydpe->d1pefr=DBL1NULL;
  ydpe->d1pera=DBL1NULL;
  ydpe->d1pero=DBL1NULL;
  ydpe->d1pevi=DBL1NULL;

  ydpe->d1psem=DBL1NULL;

  ydpe->i1pecn=INT1NULL;
  ydpe->i1pecp=INT1NULL;
  ydpe->i1pect=INT1NULL;
  ydpe->i1pefr=INT1NULL;
  ydpe->i1pejp=INT1NULL;
  ydpe->i1pemb=INT1NULL;
  ydpe->i1pemn=INT1NULL;

  ydpe->i1pnib=INT1NULL;
  ydpe->i1psde=INT1NULL;
  ydpe->i1ptyp=INT1NULL;
  ydpe->dkeneg=R0;
  
  /* joint property database	*/
  ydpj->mpjset=0; ydpj->npjset=0;
  ydpj->nintpt=7;
  ydpj->d1pjfs=DBL1NULL;
  ydpj->d1pjft=DBL1NULL;
  ydpj->d1pjgf=DBL1NULL;
  ydpj->d1pjco=DBL1NULL;
  ydpj->d1pjfr=DBL1NULL;
  ydpj->d1pjpe=DBL1NULL;
  ydpj->i1ptyp=INT1NULL;
  ydpj->i1psde=INT1NULL;
  
  /* mesh property database	*/
  ydpm->mpmcom=0;
  ydpm->mpmcol=0;
  ydpm->i2pmset=INT2NULL;
  ydpm->mpmrow=0;
  ydpm->i2pmij=INT2NULL;
  ydpm->iautbn=1; /*default: idenfy boundary nodes automatically */
  
  /* node property database	*/
  ydpn->mpnset=0; ydpn->npnset=0;
  ydpn->mpnfact=0, ydpn->npnfact=0;
  ydpn->d3pnfac=DBL3NULL;

  ydpn->i1pnfx=INT1NULL;
  ydpn->i1pnfy=INT1NULL;
  ydpn->i1pnfz=INT1NULL;

  ydpn->d1pnaf=DBL1NULL;
  ydpn->d1pnap=DBL1NULL;
  ydpn->d1pnat=DBL1NULL;
  ydpn->d1pnax=DBL1NULL;
  ydpn->d1pnay=DBL1NULL;
  ydpn->d1pnaz=DBL1NULL;

  ydpn->d1pnxx=DBL1NULL;
  ydpn->d1pnxy=DBL1NULL;
  ydpn->d1pnxz=DBL1NULL;
  ydpn->d1pnyx=DBL1NULL;
  ydpn->d1pnyy=DBL1NULL;
  ydpn->d1pnyz=DBL1NULL;
  ydpn->d1pnzx=DBL1NULL;
  ydpn->d1pnzy=DBL1NULL;
  ydpn->d1pnzz=DBL1NULL;
}

static void Yrde(yde,finp,name)
  YDE    yde; FILE *finp; CHR *name;
{ CHR *namep;
  INT melem;
  
  namep=name+8;
  if(CHRcmp(namep,"MELEM",5)==0)
  { INTr(finp,&(yde->melem));
    melem = yde->melem;
    if(melem > 0)
    { TformINT1(FILENULL,-1,melem,&(yde->i1elprtmp));
      TformINT1(FILENULL,-1,melem,&(yde->i1elcf));
      TformINT1(FILENULL,-1,melem,&(yde->i1elbe));
      TformDBL3(FILENULL,R0,3,3,melem,&(yde->d3tcs)); 
      TformDBL1(FILENULL,R0,yde->melem,&(yde->d1emct));
    }
  }
  else if(CHRcmp(namep,"NELEM",5)==0)
  { INTr(finp,&(yde->nelem));
  }
  else if(CHRcmp(namep,"MELST",5)==0)
  { INTr(finp,&(yde->melst));
    TformDBL2(FILENULL,R0,yde->melst,yde->melem,&(yde->d2elst)); 
  }
  else if(CHRcmp(namep,"NELST",5)==0)
  { INTr(finp,&(yde->nelst));
  }
  else if(CHRcmp(namep,"MELNO",5)==0)
  { INTr(finp,&(yde->melno));
  }
  else if(CHRcmp(namep,"NELNO",5)==0)
  { INTr(finp,&(yde->nelno));
  }
  else if(CHRcmp(namep,"I1ELCF",6)==0)
  { TformINT1(finp,-1,yde->melem,&(yde->i1elcf));
  }
  else if(CHRcmp(namep,"I1ELBE",6)==0) 
  { TformINT1(finp,-1,yde->melem,&(yde->i1elbe));
  }
  else if(CHRcmp(namep,"I1ELPR",6)==0)
  { TformINT1(finp,-1,yde->melem,&(yde->i1elpr));
  }
  else if(CHRcmp(namep,"D2ELST",6)==0)
  { TformDBL2(finp,R0,yde->melst,yde->melem,&(yde->d2elst));
  }
  else if(CHRcmp(namep,"I2ELTO",6)==0)
  { TformINT2(finp,-1,yde->melno,yde->melem,&(yde->i2elto));
  }
  else if(CHRcmp(namep,"D3TCS",5)==0) 
  { TformDBL3(finp,R0,3,3,yde->melem,&(yde->d3tcs));
  }
  else if(CHRcmp(namep,"D1EMCT",6)==0) 
  { TformDBL1(finp,R0,yde->melem,&(yde->d1emct));
  }
  else
  { CHRw(stderr,"Yrde: unknown name: ");
    CHRw(stderr,name);
    CHRwcr(stderr);
    exit(104);
} }

static void Yrdi(ydi,finp,name)
  YDI   ydi; FILE *finp; CHR *name;
{ CHR *namep;

  namep=name+8;
  if(CHRcmp(namep,"MICOUP",6)==0)
  { INTr(finp,&(ydi->micoup));
    if(ydi->micoup > 0)
    { TformDBL1(FILENULL,R0,ydi->micoup,&(ydi->d1iesl));
      TformINT1(FILENULL,-1,ydi->micoup,&(ydi->i1iecn)); 
      TformINT1(FILENULL,-1,ydi->micoup,&(ydi->i1iect));
    }
  }
  else if(CHRcmp(namep,"NICOUP",6)==0)
  { INTr(finp,&(ydi->nicoup));
  }
  else if(CHRcmp(namep,"IIECFF",6)==0)
  { INTr(finp,&(ydi->iiecff));
  }
  else if(CHRcmp(namep,"DIEDI",5)==0)
  { DBLr(finp,&(ydi->diedi));
  }
  else if(CHRcmp(namep,"DIEZON",6)==0)
  { DBLr(finp,&(ydi->diezon));
  }
  else if(CHRcmp(namep,"D1IESL",6)==0)
  { TformDBL1(finp,R0,ydi->micoup,&(ydi->d1iesl));
  }
  else if(CHRcmp(namep,"I1IECN",6)==0)
  { TformINT1(finp,-1,ydi->micoup,&(ydi->i1iecn));
  }
  else if(CHRcmp(namep,"I1IECT",6)==0)
  { TformINT1(finp,-1,ydi->micoup,&(ydi->i1iect));
  }
  else if(CHRcmp(namep,"MISTATE",7)==0)
  { INTr(finp,&(ydi->mistate));
    if(ydi->mistate>0 && ydi->micoup>0) 
    { TformDBL2(FILENULL,R0,ydi->mistate, ydi->micoup,&(ydi->d2sldis));
    }
  }
  else if(CHRcmp(namep,"D2SLDIS",7)==0)
  { TformDBL2(finp,R0,ydi->mistate, ydi->micoup,&(ydi->d2sldis));
  }
  else
  { CHRw(stderr,"Yrdi: unknown name: ");
    CHRw(stderr,name);
    CHRwcr(stderr);
    exit(104);
} }

static void Yrdn(ydn,finp,name)
   YDN    ydn; FILE *finp; CHR *name;
{ CHR *namep;

  namep=name+8;
  if(CHRcmp(namep,"MNODIM",5)==0)
  { INTr(finp,&(ydn->mnodim));
  }
  else if(CHRcmp(namep,"NNODIM",5)==0)
  { INTr(finp,&(ydn->nnodim));
  }
  else if(CHRcmp(namep,"MNOPO",5)==0)
  { INTr(finp,&(ydn->mnopo));
    if(ydn->mnopo>0 && ydn->mnodim>0)
    { TformDBL1(FILENULL,R0,ydn->mnopo,&(ydn->d1nmct));
      TformDBL2(FILENULL,R0,ydn->mnodim,ydn->mnopo,&(ydn->d2nft)); 
      TformDBL2(FILENULL,R0,ydn->mnodim,ydn->mnopo,&(ydn->d2nfc)); 
      TformDBL2(FILENULL,R0,ydn->mnodim,ydn->mnopo,&(ydn->d2nvc)); 
      TformINT1(FILENULL,0,ydn->mnopo,&(ydn->i1nobf));
    }
  }
  else if(CHRcmp(namep,"NNOPO",5)==0)
  { INTr(finp,&(ydn->nnopo));
  }
  else if(CHRcmp(namep,"D1NMCT",6)==0)
  { TformDBL1(finp,R0,ydn->mnopo,&(ydn->d1nmct));
  }
  else if(CHRcmp(namep,"D2NCC",5)==0)
  { TformDBL2(finp,R0,ydn->mnodim,ydn->mnopo,&(ydn->d2ncc));
  }
  else if(CHRcmp(namep,"D2NCI",5)==0)
  { TformDBL2(finp,R0,ydn->mnodim,ydn->mnopo,&(ydn->d2nci));
  }
  else if(CHRcmp(namep,"D2NFC",5)==0)
  { TformDBL2(finp,R0,ydn->mnodim,ydn->mnopo,&(ydn->d2nfc));
  }  
  else if(CHRcmp(namep,"D2NFT",5)==0) 
  { TformDBL2(finp,R0,ydn->mnodim,ydn->mnopo,&(ydn->d2nft)); 
  }
  else if(CHRcmp(namep,"D2NVC",5)==0)
  { TformDBL2(finp,R0,ydn->mnodim,ydn->mnopo,&(ydn->d2nvc));
  }
  else if(CHRcmp(namep,"I1NOBF",6)==0)
  { TformINT1(finp,-1,ydn->mnopo,&(ydn->i1nobf));
  }
  else if(CHRcmp(namep,"I1NOPR",6)==0)
  { TformINT1(finp,-1,ydn->mnopo,&(ydn->i1nopr));
  }
  else
  { CHRw(stderr,"Yrdn: unknown name: ");
    CHRw(stderr,name);
    CHRwcr(stderr);
    exit(105);
} }

static void Yrdb(ydb,finp,name)
   YDB    ydb; FILE *finp; CHR *name;
{ CHR *namep;

  namep=name+8;
  if(CHRcmp(namep,"MBORH",5)==0)
  {  INTr(finp,&(ydb->mborh));
  }
  else if(CHRcmp(namep,"NBORH",5)==0)
  {  INTr(finp,&(ydb->nborh));
  }
  else if(CHRcmp(namep,"MBDIM",5)==0)
  {  INTr(finp,&(ydb->mbdim));
  }
  else if(CHRcmp(namep,"NBDIM",5)==0)
  {  INTr(finp,&(ydb->nbdim));
  }
  else if(CHRcmp(namep,"NBPAF",5)==0)
  {  INTr(finp,&(ydb->nbpaf));
  }
  else if(CHRcmp(namep,"D2BCA",5)==0)
  { TformDBL2(finp,R0,ydb->mbdim,ydb->mborh,&(ydb->d2bca));
  }
  else if(CHRcmp(namep,"D2BCB",5)==0)
  { TformDBL2(finp,R0,ydb->mbdim,ydb->mborh,&(ydb->d2bcb));
  }
  else if(CHRcmp(namep,"D1BRAD",6)==0)
  { TformDBL1(finp,R0,ydb->mborh,&(ydb->d1brad));
  }
  else if(CHRcmp(namep,"D1BPAF",6)==0)
  { TformDBL1(finp,R0,ydb->nbpaf,&(ydb->d1bpaf));
  }
  else if(CHRcmp(namep,"D1BPTS",6)==0)
  { TformDBL1(finp,R0,ydb->mborh,&(ydb->d1bpts));
  }
  else if(CHRcmp(namep,"D1BPTE",6)==0)
  { TformDBL1(finp,R0,ydb->mborh,&(ydb->d1bpte));
  }
  else if(CHRcmp(namep,"D1BVDT",6)==0)
  { TformDBL1(finp,R0,ydb->mborh,&(ydb->d1bvdt));
  }
  else if(CHRcmp(namep,"D1BPRS",6)==0)
  { TformDBL1(finp,R0,ydb->mborh,&(ydb->d1bprs));
  }
  else if(CHRcmp(namep,"DBLMAX",6)==0)
  {  DBLr(finp,&(ydb->dblmax));
  }
  else if(CHRcmp(namep,"DBBUF",5)==0)
  {  DBLr(finp,&(ydb->dbbuf));
  }
  else
  { CHRw(stderr,"Yrdb: unknown name: ");
    CHRw(stderr,name);
    CHRwcr(stderr);
    exit(105);
} }

static void Yrds(yds,finp,name)
   YDS yds; FILE *finp; CHR *name;
{ CHR *namep;

  namep=name+8;
  if(CHRcmp(namep,"MSOUR",5)==0)
  {  INTr(finp,&(yds->msour));
  }
  else if(CHRcmp(namep,"NSOUR",5)==0)
  {  INTr(finp,&(yds->nsour));
  }
  else if(CHRcmp(namep,"MSDIM",5)==0)
  {  INTr(finp,&(yds->msdim));
  }
  else if(CHRcmp(namep,"NSDIM",5)==0)
  {  INTr(finp,&(yds->nsdim));
  }
  else if(CHRcmp(namep,"NSPAF",5)==0)
  {  INTr(finp,&(yds->nspaf));
  }
  else if(CHRcmp(namep,"NSSAF",5)==0)
  {  INTr(finp,&(yds->nssaf));
  }
  else if(CHRcmp(namep,"D2SCS",5)==0)
  { TformDBL2(finp,R0,yds->msdim,yds->msour,&(yds->d2scs));
  }
  else if(CHRcmp(namep,"D1SPAF",6)==0)
  { TformDBL1(finp,R0,yds->nspaf,&(yds->d1spaf));
  }
  else if(CHRcmp(namep,"D1SSAF",6)==0)
  { TformDBL1(finp,R0,yds->nssaf,&(yds->d1ssaf));
  }
  else if(CHRcmp(namep,"D1SPTS",6)==0)
  { TformDBL1(finp,R0,yds->msour,&(yds->d1spts));
  }
  else if(CHRcmp(namep,"D1SPTE",6)==0)
  { TformDBL1(finp,R0,yds->msour,&(yds->d1spte));
  }
  else if(CHRcmp(namep,"D1SVPR",6)==0)
  { TformDBL1(finp,R0,yds->msour,&(yds->d1svpr));
  }
  else if(CHRcmp(namep,"D1SPRS",6)==0)
  { TformDBL1(finp,R0,yds->msour,&(yds->d1sprs));
  }
  else if(CHRcmp(namep,"D1SSIR",6)==0)
  { TformDBL1(finp,R0,yds->msour,&(yds->d1ssir));
  }
  else if(CHRcmp(namep,"DSBUF",5)==0)
  { DBLr(finp,&(yds->dsbuf));
  }
  else
  { CHRw(stderr,"Yrds: unknown name: ");
    CHRw(stderr,name);
    CHRwcr(stderr);
    exit(105);
} }

static void Yrdo(ydo,finp,name)
   YDO    ydo; FILE *finp; CHR *name;
{ INT i; CHR *namep;

  namep=name+8;
  if(CHRcmp(namep,"MOHYS",5)==0)
  { INTr(finp,&(ydo->mohys))
    i=(ydo->mohys)*sizeof(FILE*);
    if(i>0)ydo->f2ohyf=(FILE**)MALLOC(i);
    for(i=0;i<(ydo->mohys);i++)
    { ydo->f2ohyf[i]=FILENULL;
  } }
  else if(CHRcmp(namep,"NOHYS",5)==0)
  {  INTr(finp,&(ydo->nohys));
  }
  else if(CHRcmp(namep,"DOHYP",5)==0)
  { DBLr(finp,&(ydo->dohyp));
  }
  else if(CHRcmp(namep,"D1OHYS",6)==0)
  { TformDBL1(finp,R0,ydo->mohys,&(ydo->d1ohys));
  }
  else if(CHRcmp(namep,"D1OHYC",6)==0)
  { TformDBL1(finp,R0,ydo->mohys,&(ydo->d1ohyc));
  }
  else if(CHRcmp(namep,"D1OHYF",6)==0)
  { TformDBL1(finp,R0,ydo->mohys,&(ydo->d1ohyf));
  }
  else if(CHRcmp(namep,"D1OHYT",6)==0)
  { TformDBL1(finp,R0,ydo->mohys,&(ydo->d1ohyt));
  }
  else if(CHRcmp(namep,"D1OHYX",6)==0)
  { TformDBL1(finp,R0,ydo->mohys,&(ydo->d1ohyx));
  }
  else if(CHRcmp(namep,"D1OHYY",6)==0)
  { TformDBL1(finp,R0,ydo->mohys,&(ydo->d1ohyy));
  }
  else if(CHRcmp(namep,"D1OHYZ",6)==0)
  { TformDBL1(finp,R0,ydo->mohys,&(ydo->d1ohyz));
  }
  else if(CHRcmp(namep,"I1OHYT",6)==0)
  { TformINT1(finp,-1,ydo->mohys,&(ydo->i1ohyt));
  }
  else
  { CHRw(stderr,"Yrdo: unknown name: ");
    CHRw(stderr,name);
    CHRwcr(stderr);
    exit(105);
} }

static void Yrdpe(ydpe,finp,name)
  YDPE    ydpe; FILE *finp; CHR *name;
{ CHR *namep;

  namep=name+9;
  if(CHRcmp(namep,"MPROP",5)==0)
  { INTr(finp,&(ydpe->mprop));
    if(ydpe->mprop>0)
    { TformDBL1(FILENULL,R0,ydpe->mprop,&(ydpe->d1peks));
      TformDBL1(FILENULL,R0,ydpe->mprop,&(ydpe->d1pefr));
      TformINT1(FILENULL, 0,ydpe->mprop,&(ydpe->i1pemb));
      TformINT1(FILENULL, 0,ydpe->mprop,&(ydpe->i1psde));
    }
  }
  else if(CHRcmp(namep,"NPROP",5)==0)
  { INTr(finp,&(ydpe->nprop));
  }
  else if(CHRcmp(namep,"D1PECA",6)==0)
  { TformDBL1(finp,R0,ydpe->mprop,&(ydpe->d1peca));
  }
  else if(CHRcmp(namep,"D1PECL",6)==0)
  { TformDBL1(finp,R0,ydpe->mprop,&(ydpe->d1pecl));
  }
  else if(CHRcmp(namep,"D1PEKS",6)==0)
  { TformDBL1(finp,R0,ydpe->mprop,&(ydpe->d1peks));
  }
  else if(CHRcmp(namep,"D1PELA",6)==0)
  { TformDBL1(finp,R0,ydpe->mprop,&(ydpe->d1pela));
  }
  else if(CHRcmp(namep,"D1PEMU",6)==0)
  { TformDBL1(finp,R0,ydpe->mprop,&(ydpe->d1pemu));
  }
  else if(CHRcmp(namep,"D1PEPE",6)==0)
  { TformDBL1(finp,R0,ydpe->mprop,&(ydpe->d1pepe));
  }
  else if(CHRcmp(namep,"D1PEPT",6)==0)
  { TformDBL1(finp,R0,ydpe->mprop,&(ydpe->d1pept));
  }
  else if(CHRcmp(namep,"D1PEFR",6)==0)
  { TformDBL1(finp,R0,ydpe->mprop,&(ydpe->d1pefr));
  }
  else if(CHRcmp(namep,"D1PERA",6)==0)
  { TformDBL1(finp,R0,ydpe->mprop,&(ydpe->d1pera));
  }
  else if(CHRcmp(namep,"D1PERO",6)==0)
  { TformDBL1(finp,R0,ydpe->mprop,&(ydpe->d1pero));
  }
  else if(CHRcmp(namep,"D1PEVI",6)==0)
  { TformDBL1(finp,R0,ydpe->mprop,&(ydpe->d1pevi));
  }
  else if(CHRcmp(namep,"D1PSEM",6)==0)
  { TformDBL1(finp,R0,ydpe->mprop,&(ydpe->d1psem));
  }
  else if(CHRcmp(namep,"I1PECN",6)==0)
  { TformINT1(finp,-1,ydpe->mprop,&(ydpe->i1pecn));
  }
  else if(CHRcmp(namep,"I1PECP",6)==0)
  { TformINT1(finp,-1,ydpe->mprop,&(ydpe->i1pecp));
  }
  else if(CHRcmp(namep,"I1PECT",6)==0)
  { TformINT1(finp,-1,ydpe->mprop,&(ydpe->i1pect));
  }
  else if(CHRcmp(namep,"I1PEFR",6)==0)
  { TformINT1(finp,-1,ydpe->mprop,&(ydpe->i1pefr));
  }
  else if(CHRcmp(namep,"I1PEJP",6)==0)
  { TformINT1(finp,-1,ydpe->mprop,&(ydpe->i1pejp));
  }
  else if(CHRcmp(namep,"I1PEMB",6)==0)
  { TformINT1(finp,-1,ydpe->mprop,&(ydpe->i1pemb));
  }
  else if(CHRcmp(namep,"I1PEMN",6)==0)
  { TformINT1(finp,-1,ydpe->mprop,&(ydpe->i1pemn));
  }
  else if(CHRcmp(namep,"I1PNIB",6)==0)
  { TformINT1(finp,-1,ydpe->mprop,&(ydpe->i1pnib));
  }
  else if(CHRcmp(namep,"I1PSDE",6)==0)
  { TformINT1(finp,-1,ydpe->mprop,&(ydpe->i1psde));
  }
  else if(CHRcmp(namep,"I1PTYP",6)==0)
  { TformINT1(finp,-1,ydpe->mprop,&(ydpe->i1ptyp));
  }
  else
  { CHRw(stderr,"Yrdpe: unknown name: ");
    CHRw(stderr,name);
    CHRwcr(stderr);
    exit(104);
} }

static void Yrdpj(ydpj,finp,name)
YDPJ ydpj; FILE *finp; CHR *name;
{ CHR *namep;
  namep=name+9;

  if(CHRcmp(namep,"MPJSET",6)==0)
  { INTr(finp,&(ydpj->mpjset));
    if(ydpj->mpjset>0)
    { TformDBL1(FILENULL,R0,ydpj->mpjset,&(ydpj->d1pjco));
      TformDBL1(FILENULL,R0,ydpj->mpjset,&(ydpj->d1pjfr));
    }
  }
  else if(CHRcmp(namep,"NPJSET",6)==0)
  { INTr(finp,&(ydpj->npjset));
  }
  else if(CHRcmp(namep,"NINTPT",6)==0)
  { INTr(finp, &(ydpj->nintpt));
    if(ydpj->nintpt!=3 && ydpj->nintpt!=7) ydpj->nintpt = 7;
  }
  else if(CHRcmp(namep,"D1PJFS",6)==0)
  { TformDBL1(finp,R0,ydpj->mpjset,&(ydpj->d1pjfs));
  }
  else if(CHRcmp(namep,"D1PJFT",6)==0)
  { TformDBL1(finp,R0,ydpj->mpjset,&(ydpj->d1pjft));
  }
  else if(CHRcmp(namep,"D1PJGF",6)==0)
  { TformDBL1(finp,R0,ydpj->mpjset,&(ydpj->d1pjgf));
  }
  else if(CHRcmp(namep,"D1PJCO",6)==0)
  { TformDBL1(finp,R0,ydpj->mpjset,&(ydpj->d1pjco));
  }
  else if(CHRcmp(namep,"D1PJFR",6)==0)
  { TformDBL1(finp,R0,ydpj->mpjset,&(ydpj->d1pjfr));
  }
  else if(CHRcmp(namep,"D1PJPE",6)==0)
  { TformDBL1(finp,R0,ydpj->mpjset,&(ydpj->d1pjpe));
  }
  else if(CHRcmp(namep,"I1PSDE",6)==0)
  { TformINT1(finp,-1,ydpj->mpjset,&(ydpj->i1psde));
  }
  else if(CHRcmp(namep,"I1PTYP",6)==0)
  { TformINT1(finp,-1,ydpj->mpjset,&(ydpj->i1ptyp));
  }
  else
  { CHRw(stderr,"Yrdpj: unknown name: ");
    CHRw(stderr,name);
    CHRwcr(stderr);
    exit(104);
  }
}

static void Yrdpm(ydpm,finp,name)
YDPM ydpm; FILE *finp; CHR *name;
{ CHR *namep;
  namep=name+9;

  if(CHRcmp(namep,"MPMCOM",6)==0)
  { INTr(finp,&(ydpm->mpmcom));
  }
  else if(CHRcmp(namep,"MPMCOL",6)==0)
  { INTr(finp,&(ydpm->mpmcol));
  }
  else if(CHRcmp(namep,"I2PMSET",7)==0)
  { TformINT2(finp,-1,ydpm->mpmcol,ydpm->mpmcom,&(ydpm->i2pmset));
  }
  else if(CHRcmp(namep,"MPMROW",6)==0)
  { INTr(finp,&(ydpm->mpmrow));
  }
  else if(CHRcmp(namep,"I2PMIJ",6)==0)
  { TformINT2(finp,-1,3,ydpm->mpmrow,&(ydpm->i2pmij));
  }
  else if(CHRcmp(namep,"IAUTBN",6)==0)
  { INTr(finp,&(ydpm->iautbn));
    if(ydpm->iautbn<0) ydpm->iautbn = 1; /* set to default value */
  }
  else
  { CHRw(stderr,"Yrdpm: unknown name: ");
    CHRw(stderr,name);
    CHRwcr(stderr);
    exit(104);
  }
}

static void Yrdpn(ydpn,finp,name)
YDPN ydpn; FILE *finp; CHR *name;
{ CHR *namep;

  namep=name+9;
  if(CHRcmp(namep,"MPNSET",6)==0)
  { INTr(finp,&(ydpn->mpnset));
    if(ydpn->mpnset > 0)
    { TformINT1(FILENULL,-1,ydpn->mpnset,&(ydpn->i1pnfx));
      TformINT1(FILENULL,-1,ydpn->mpnset,&(ydpn->i1pnfy));
      TformINT1(FILENULL,-1,ydpn->mpnset,&(ydpn->i1pnfz));
      
      TformDBL1(FILENULL,R1,ydpn->mpnset,&(ydpn->d1pnaf));
      TformDBL1(FILENULL,R0,ydpn->mpnset,&(ydpn->d1pnap));
      TformDBL1(FILENULL,R0,ydpn->mpnset,&(ydpn->d1pnat));      
      TformDBL1(FILENULL,R1,ydpn->mpnset,&(ydpn->d1pnax));
      TformDBL1(FILENULL,R1,ydpn->mpnset,&(ydpn->d1pnay));
      TformDBL1(FILENULL,R1,ydpn->mpnset,&(ydpn->d1pnaz));
      
      TformDBL1(FILENULL,R1,ydpn->mpnset,&(ydpn->d1pnxx));
      TformDBL1(FILENULL,R0,ydpn->mpnset,&(ydpn->d1pnxy));
      TformDBL1(FILENULL,R0,ydpn->mpnset,&(ydpn->d1pnxz));
      TformDBL1(FILENULL,R0,ydpn->mpnset,&(ydpn->d1pnyx));
      TformDBL1(FILENULL,R1,ydpn->mpnset,&(ydpn->d1pnyy));
      TformDBL1(FILENULL,R0,ydpn->mpnset,&(ydpn->d1pnyz));
      TformDBL1(FILENULL,R0,ydpn->mpnset,&(ydpn->d1pnzx));
      TformDBL1(FILENULL,R0,ydpn->mpnset,&(ydpn->d1pnzy));
      TformDBL1(FILENULL,R1,ydpn->mpnset,&(ydpn->d1pnzz));
    }
  }
  else if(CHRcmp(namep,"NPNSET",6)==0)
  { INTr(finp,&(ydpn->npnset));
  }
  else if(CHRcmp(namep,"MPNFACT",7)==0)
  { INTr(finp,&(ydpn->mpnfact));
  }
  else if(CHRcmp(namep,"NPNFACT",7)==0)
  { INTr(finp,&(ydpn->npnfact));
  }
  else if(CHRcmp(namep,"D3PNFAC",7)==0)
  { TformDBL3(finp,R0,2,ydpn->mpnset,ydpn->mpnfact,&(ydpn->d3pnfac));
  }
  else if(CHRcmp(namep,"I1PNFX",6)==0)
  { TformINT1(finp,-1,ydpn->mpnset,&(ydpn->i1pnfx));
  }
  else if(CHRcmp(namep,"I1PNFY",6)==0)
  { TformINT1(finp,-1,ydpn->mpnset,&(ydpn->i1pnfy));
  }
  else if(CHRcmp(namep,"I1PNFZ",6)==0)
  { TformINT1(finp,-1,ydpn->mpnset,&(ydpn->i1pnfz));
  }
  else if(CHRcmp(namep,"D1PNAF",6)==0)
  { TformDBL1(finp,R1,ydpn->mpnset,&(ydpn->d1pnaf));
  }
  else if(CHRcmp(namep,"D1PNAT",6)==0)
  { TformDBL1(finp,R0,ydpn->mpnset,&(ydpn->d1pnat));
  }
  else if(CHRcmp(namep,"D1PNAP",6)==0)
  { TformDBL1(finp,R0,ydpn->mpnset,&(ydpn->d1pnap));
  }
  else if(CHRcmp(namep,"D1PNAX",6)==0)
  { TformDBL1(finp,R0,ydpn->mpnset,&(ydpn->d1pnax));
  }
  else if(CHRcmp(namep,"D1PNAY",6)==0)
  { TformDBL1(finp,R0,ydpn->mpnset,&(ydpn->d1pnay));
  }
  else if(CHRcmp(namep,"D1PNAZ",6)==0)
  { TformDBL1(finp,R0,ydpn->mpnset,&(ydpn->d1pnaz));
  }
  else if(CHRcmp(namep,"D1PNXX",6)==0)
  { TformDBL1(finp,R1,ydpn->mpnset,&(ydpn->d1pnxx));
  }
  else if(CHRcmp(namep,"D1PNXY",6)==0)
  { TformDBL1(finp,R0,ydpn->mpnset,&(ydpn->d1pnxy));
  }
  else if(CHRcmp(namep,"D1PNXZ",6)==0)
  { TformDBL1(finp,R0,ydpn->mpnset,&(ydpn->d1pnxz));
  }
  else if(CHRcmp(namep,"D1PNYX",6)==0)
  { TformDBL1(finp,R0,ydpn->mpnset,&(ydpn->d1pnyx));
  }
  else if(CHRcmp(namep,"D1PNYY",6)==0)
  { TformDBL1(finp,R1,ydpn->mpnset,&(ydpn->d1pnyy));
  }
  else if(CHRcmp(namep,"D1PNYZ",6)==0)
  { TformDBL1(finp,R0,ydpn->mpnset,&(ydpn->d1pnyz));
  }
  else if(CHRcmp(namep,"D1PNZX",6)==0)
  { TformDBL1(finp,R0,ydpn->mpnset,&(ydpn->d1pnzx));
  }
  else if(CHRcmp(namep,"D1PNZY",6)==0)
  { TformDBL1(finp,R0,ydpn->mpnset,&(ydpn->d1pnzy));
  }
  else if(CHRcmp(namep,"D1PNZZ",6)==0)
  { TformDBL1(finp,R1,ydpn->mpnset,&(ydpn->d1pnzz));
  }
  else
  { CHRw(stderr,"Yrdpn: unknown name: ");
    CHRw(stderr,name);
    CHRwcr(stderr);
    exit(104);
  }
}

static void Yrincl(ydc,finp) /* Zhou LEI, 2010-11-10 20:30:17 */
YDC ydc; FILE *finp;
{ CHR name[300];
  FILE *fin=FILENULL;
  INT nfile;
  
  CHRr(finp,name); /* read the name of the include file */
  if(FILEND(finp)!=0)
  { CHRw(stderr,"Yrincl: attempting to read past the end of the file.");
    CHRwcr(stderr);
    exit(104);
  }
  
  nfile = ydc->nfile+1;
  if(nfile>=10)
  { CHRw(stderr,"Yrincl: too many number of include-files.");
    CHRw(stderr,name);
    CHRwcr(stderr);
    exit(104);
  }
  
  fin = fopen(name, "r");
  if(fin==FILENULL)
  { CHRw(stderr,"Yrd: Could not open input file: ");
    CHRw(stderr,name);
    CHRwcr(stderr);
    exit(104);
  }
  else
  { CHRw(ydc->fcheck,"* open included-file: "); 
    CHRw(ydc->fcheck,name);
    CHRwcr(ydc->fcheck);
  }
  
  ydc->files[nfile] = fin;
  ydc->nfile = nfile;
  ydc->finp = fin;
}
/***************************PUBLIC***********************************/
INT Yrd(namep,yd)
   CHR *namep; YD yd;
{ INT icount;
  INT static nline=0;
  CHR name[300];
  YDC ydc=&(yd->ydc);
  YDE yde=&(yd->yde);
  YDI ydi=&(yd->ydi);
  YDN ydn=&(yd->ydn);
  YDB ydb=&(yd->ydb);
  YDS yds=&(yd->yds);
  YDO ydo=&(yd->ydo);
  YDPE ydpe=&(yd->ydpe);
  YDPN ydpn=&(yd->ydpn);
  YDPJ ydpj=&(yd->ydpj);
  YDPM ydpm=&(yd->ydpm);
  
  INT nfile;
  
  if((ydc->finp)==(FILENULL))
  { Yrdd(yd);
    ydc->finp=fopen(namep,"r");
    ydc->fcheck=fopen("Ytmp","w");
    ydc->nfile = 0;
    ydc->files[0] = ydc->finp;
  }
  if(((ydc->finp)==(FILENULL))||((ydc->fcheck)==(FILENULL)))
  { CHRw(stderr,"Yrd: Could not open input file - usage -i inputfile");
    CHRwcr(stderr);
    return 0;
  }

  SETLINEBUF(ydc->fcheck);
  CHRr(ydc->finp,name);
  while(1)
  { if(FILEND(ydc->finp)!=0)
    { fclose(ydc->finp);
      nfile = ydc->nfile;
      ydc->files[nfile]=FILENULL;
      nfile = nfile-1;
      if(nfile<0) break;
      CHRw(ydc->fcheck,"* close included-file.");   CHRwcr(ydc->fcheck); 
      
      ydc->nfile = nfile;
      ydc->finp = ydc->files[nfile];
    }
    else
    { if(CHRcmp(name, "$YINCL", 6)==0)
      { CHRw(ydc->fcheck,name); CHRwcr(ydc->fcheck);
        Yrincl(ydc,ydc->finp);
      }
      else if(CHRcmp(name, "$YSTOP",6)==0)
      { CHRw(ydc->fcheck,name); CHRwcr(ydc->fcheck);
        return 0;
      }
      else if(CHRcmp(name, "$YDOIT",6)==0)
      { CHRw(ydc->fcheck,name); CHRwcr(ydc->fcheck);
        return 1;
      }
      else if(CHRcmp(name,"/*",2)==0)    /* read and ignore comments */
      { icount=0;
        do
        { CHRr(ydc->finp,name); icount++;
          if(icount>100)
          { CHRw(stderr,"Yrd: too long comment near - ");
            CHRw(stderr,name);
            CHRwcr(stderr);
            nline=nline_current_position(ydc->finp);
            CHRw(stderr,"   at line: ");
            INTw(stderr, nline, 5);
            CHRwcr(stderr);
            return 0;
          }
        }while((FILEND(ydc->finp)==0)&&(CHRcmp(name,"*/",2)!=0));
      }
      else if(CHRcmp(name, "/YD/",4)==0)
      { CHRw(ydc->fcheck,name); CHRwcr(ydc->fcheck);
        if(CHRcmp(name,"/YD/YDC/",8)==0)        /* read control data                  */
        { Yrdc(ydc,ydc->finp,name);
        }
        else if(CHRcmp(name,"/YD/YDE/",8)==0)   /* read data elements                 */
        { Yrde(yde,ydc->finp,name);
        }
        else if(CHRcmp(name,"/YD/YDI/",8)==0)   /* read data interaction              */
        { Yrdi(ydi,ydc->finp,name);
        }
        else if(CHRcmp(name,"/YD/YDN/",8)==0)   /* read data nodes                    */
        { Yrdn(ydn,ydc->finp,name);
        }
        else if(CHRcmp(name,"/YD/YDB/",8)==0)   /* read data boreholes                */
        { Yrdb(ydb,ydc->finp,name);
        }
        else if(CHRcmp(name,"/YD/YDS/",8)==0)   /* read data sources                  */
        { Yrds(yds,ydc->finp,name);
        }
        else if(CHRcmp(name,"/YD/YDO/",8)==0)   /* read data output                   */
        { Yrdo(ydo,ydc->finp,name);
        }
        else if(CHRcmp(name,"/YD/YDPE/",9)==0)  /* read data properties elements      */
        { Yrdpe(ydpe,ydc->finp,name);
        }
        else if(CHRcmp(name,"/YD/YDPN/",9)==0)  /* read data properties nodes         */
        { Yrdpn(ydpn,ydc->finp,name);
        }
        else if(CHRcmp(name,"/YD/YDPJ/",9)==0)  /* read data properties joints        */
        { Yrdpj(ydpj,ydc->finp,name);
        }
        else if(CHRcmp(name,"/YD/YDPM/",9)==0)  /* read data properties meshing       */
        { Yrdpm(ydpm,ydc->finp,name);
        }
        else
        { CHRw(stderr,"Yrd: unknown name: ");
          CHRw(stderr,name);
          CHRwcr(stderr);   
          nline=nline_current_position(ydc->finp);
          CHRw(stderr,"   at line: ");
          INTw(stderr, nline, 5);
          CHRwcr(stderr);   
          return 0;
      } }
      else
      { CHRw(stderr,"Yrd: unknown name: ");
        CHRw(stderr,name);
        CHRwcr(stderr);
        nline=nline_current_position(ydc->finp);
        CHRw(stderr,"   at line: ");
        INTw(stderr, nline, 5);
        CHRwcr(stderr);   
        return 0;
      }
    }
        
    CHRr(ydc->finp,name);
  }

  fclose(ydc->finp);
  fclose(ydc->fcheck);
  return 0;
}

INT Ycheck(yd)
  YD yd;
{ YDC ydc=&(yd->ydc);
  YDE yde=&(yd->yde);
  YDI ydi=&(yd->ydi);
  YDN ydn=&(yd->ydn);
  YDO ydo=&(yd->ydo);
  YDPE ydpe=&(yd->ydpe);
  YDPN ydpn=&(yd->ydpn);
  YDPJ ydpj=&(yd->ydpj);
  YDPM ydpm=&(yd->ydpm);
  INT i, j;
  
  /************************** ESSENTIAL STATEMENTS *****************************/
 {INT mprop = ydpe->mprop;  INT nprop = ydpe->nprop;
  INT iprop, itype, itype0;
  DBL s, x1,y1,z1,x2,y2,z2,x3,y3,z3;
  
  if(ydn->nnodim==3)
  { for(iprop=0; iprop<nprop; iprop++)
    { itype = ydpe->i1ptyp[iprop];
      if(iprop==0) itype0 = itype;
      if((itype!=YTE3TETELS)&&(itype!=YTE3TETELL)&&(itype!=YTE2TRIELS)&&(itype!=YTE2TRIRIG))
      { fprintf(stderr,"Yck: #%ld I1PTYP mismatch any element propety.\n", iprop);
        return (-1);
      }
      if(itype0!=itype)
      { fprintf(stderr,"Yck: all elements must have the same propety, pls check I1PTYP.\n");
        return (-1);
      }
    }
    ydc->ietype = itype0; /* set the element type be using */
    if(ydc->ietype==YTE3TETELL) ydc->initer = 0;
  }
  
  if(yde->d3tcs==DBL3NULL)
  { yde->d3tcs = TalDBL3I(ydn->nnodim,ydn->nnodim,yde->melem,R0);
  }
  
  for(iprop=0; iprop<ydpn->npnset; iprop++)
  { x1=ydpn->d1pnxx[iprop]; y1=ydpn->d1pnxy[iprop]; z1=ydpn->d1pnxz[iprop];
    x2=ydpn->d1pnyx[iprop]; y2=ydpn->d1pnyy[iprop]; z2=ydpn->d1pnyz[iprop];
    x3=ydpn->d1pnzx[iprop]; y3=ydpn->d1pnzy[iprop]; z3=ydpn->d1pnzz[iprop];
    
    V3DNor(s,ydpn->d1pnxx[iprop], ydpn->d1pnxy[iprop], ydpn->d1pnxz[iprop]);
    if(s<=EPSILON)
    { fprintf(stderr, "Yck: #%ld X-base is a zero vector.\n", iprop);
      return(-1);
    }
    V3DNor(s,ydpn->d1pnyx[iprop], ydpn->d1pnyy[iprop], ydpn->d1pnyz[iprop]);
    if(s<=EPSILON)
    { fprintf(stderr, "Yck: #%ld Y-base is a zero vector.\n", iprop);
      return(-1);
    }
    V3DNor(s,ydpn->d1pnzx[iprop], ydpn->d1pnzy[iprop], ydpn->d1pnzz[iprop]);
    if(s<=EPSILON)
    { fprintf(stderr, "Yck: #%ld Z-base is a zero vector.\n", iprop);
      return(-1);
    }
    
    V3DDot(s,x1,y1,z1,x2,y2,z2);
    if(s>EPSILON)
    { fprintf(stderr, "Yck: #%ld X- & Y-base are not orthogonal.\n", iprop);
      return(-1);
    }
    V3DDot(s,x1,y1,z1,x3,y3,z3);
    if(s>EPSILON)
    { fprintf(stderr, "Yck: #%ld X- & Z-base are not orthogonal.\n", iprop);
      return(-1);
    }
    V3DDot(s,x3,y3,z3,x2,y2,z2);
    if(s>EPSILON)
    { fprintf(stderr, "Yck: #%ld Y- & Z-base are not orthogonal.\n", iprop);
      return(-1);
    }    
  }
 }
  /*****************************************************************************/
  
  
  /*check element data*/
 {if((yde->melem<1) || (yde->nelem<1) || (yde->melem<yde->nelem))
  { CHRw(stderr,"Yck: illegitimate parameter definition - MELEM or NELEM.\n");
    return (-1);
  }
  if((yde->melno<1) || (yde->nelno<1) || (yde->melno<yde->nelno))
  { CHRw(stderr,"Yck: illegitimate parameter definition - MELNO or NELNO.\n");
    return (-1);
  }
  if(yde->i1elpr==INT1NULL)
  { CHRw(stderr,"Yck: missing element propety definition.\n");
    return (-1);
  }
  if(yde->i2elto==INT2NULL)
  { CHRw(stderr,"Yck: missing element topology definition.\n");
    return (-1);
  }
 }
 
  /*check node data*/
 {if(ydn->d2nci==DBL2NULL)
  { CHRw(stderr,"Yck: missing nodal initial coordinate definition.\n");
    return (-1);
  }
  if(ydn->d2ncc==DBL2NULL)
  { ydn->d2ncc = TalDBL2(ydn->nnodim, ydn->mnopo);
    for(i=0; i<ydn->nnodim; i++)
    { for(j=0; j<ydn->mnopo; j++)
      { ydn->d2ncc[i][j] = ydn->d2nci[i][j];
      }
    }
  }
  if(ydn->i1nopr==INT1NULL)
  { CHRw(stderr,"Yck: missing nodal property definition.\n");
    return (-1);
  }
 } 
 
  /*check meshing control set*/
 {if(ydpm->i2pmset==INT2NULL)
  { if(ydpm->mpmcom!=0 || ydpm->mpmrow!=0 || ydpm->i2pmij!=INT2NULL)
    { ydpm->mpmcom = 0;
      ydpm->mpmcol = 0;
      ydpm->mpmrow = 0;
      if(ydpm->i2pmij!=INT2NULL) 
      { FREE(ydpm->i2pmij);
        ydpm->i2pmij=INT2NULL;
      }
      CHRw(stderr,"Yck: missing some parameters for meshing set - 1.\n");
    }
  }
  else
  { if(ydpm->mpmrow!=0==0 || ydpm->i2pmij==INT2NULL)
    { CHRw(stderr,"Yck: missing some parameters for meshing set - 2.\n");
      return(-1);
    }
  }
 }
 
  /*check element property*/
 {INT mprop = ydpe->mprop;  INT nprop = ydpe->nprop;
  INT iprop;
  if(mprop<1)
  { CHRw(stderr,"Yck: MPROP must be larger than 0.\n");
    return (-1);
  }
  if(nprop<1 || nprop>mprop)
  { CHRw(stderr,"Yck: NPROP must be larger than 0 and less than MPROP.\n");
    return (-1);
  }
  if(ydpe->d1pela==DBL1NULL)
  { CHRw(stderr,"Yck: missing material propety LAMDA definition.\n");
    return (-1);
  }
  if(ydpe->d1pemu==DBL1NULL)
  { CHRw(stderr,"Yck: missing material propety MU definition.\n");
    return (-1);
  }
  if(ydpe->d1pero==DBL1NULL)
  { CHRw(stderr,"Yck: missing material density RO definition.\n");
    return (-1);
  }
  if(ydpe->d1pepe==DBL1NULL)
  { CHRw(stderr,"Yck: missing material propety PENALTY definition.\n");
    ydpe->d1pepe=TalDBL1I(mprop, 0.0);
  }
  if(ydpe->i1ptyp==INT1NULL)
  { CHRw(stderr,"Yck: missing element property type definition.\n");
    return (-1);
  }
  
  for(iprop=0; iprop<nprop; iprop++)
  { if(ydpe->d1pefr[iprop] < NEPSILON)
    { fprintf(stderr,"Yck: #%ld D1PEFR should be larger than zero.\n", iprop);
      return (-1);
    }
    if(ydpe->d1peks[iprop] < NEPSILON)
    { fprintf(stderr,"Yck: #%ld D1PEKS should be larger than zero.\n", iprop);
      return (-1);
    }
    if(ydpe->d1pela[iprop] < NEPSILON)
    { fprintf(stderr,"Yck: #%ld D1PELA should be larger than zero.\n", iprop);
      return (-1);
    }
    if(ydpe->d1pemu[iprop] < NEPSILON)
    { fprintf(stderr,"Yck: #%ld D1PEMU should be larger than zero.\n", iprop);
      return (-1);
    }
    if(ydpe->d1pero[iprop] < NEPSILON)
    { fprintf(stderr,"Yck: #%ld D1PERO should be larger than zero.\n", iprop);
      return (-1);
    }
    if(ydpe->d1pepe[iprop] < NEPSILON)
    { fprintf(stderr,"Yck: #%ld D1PEPE should be larger than zero.\n", iprop);
      return (-1);
    }
  }
 } 
 
  /*check joint property*/
 {INT mpjset = ydpj->mpjset; INT npjset = ydpj->npjset;
  INT mpmcom=ydpm->mpmcom; INT mpmcol=ydpm->mpmcol; INT mpmrow=ydpm->mpmrow;
  if(mpmcom!=0 && mpmcol!=0 && ydpm->i2pmset!=INT2NULL)
  { if(mpjset==0 || npjset==0)
    { CHRw(stderr,"Yck: missing property set for joint elements (nb.=0).\n");
      return(-1);
    }
    if(ydpj->d1pjfs==DBL1NULL)
    { CHRw(stderr,"Yck: missing shear strength set for joint elements.\n");
      return(-1);
    }
    if(ydpj->d1pjft==DBL1NULL)
    { CHRw(stderr,"Yck: missing tensile strength set for joint elements.\n");
      return(-1);
    }
    if(ydpj->d1pjgf==DBL1NULL)
    { CHRw(stderr,"Yck: missing fracture energy set for joint elements.\n");
      return(-1);
    }
    if(ydpj->d1pjpe==DBL1NULL)
    { CHRw(stderr,"Yck: missing penalty parameter set for joint elements.\n");
      return(-1);
    }
    if(ydpj->i1ptyp==INT1NULL)
    { CHRw(stderr,"Yck: missing type set for joint elements.\n");
      return(-1);
    }
  }
  for(i=0; i<npjset; i++)
  { if(ydc->ietype==YTE3TETELS)
    { if(ydpj->i1ptyp[i]!=YTE3JOINTS)
      { CHRw(stderr,"Yck: mismatch joint element type with 10-nodes tetra.\n");
        return(-1);
      }
    }
    else if(ydc->ietype==YTE3TETELL)
    { if(ydpj->i1ptyp[i]!=YTE3JOINTL)
      { CHRw(stderr,"Yck: mismatch joint element type with 4-nodes tetra.\n");
        return(-1);
      }
    }
  }
 } 
  return (0);
}

#undef ILLEGITIMATEMSG
